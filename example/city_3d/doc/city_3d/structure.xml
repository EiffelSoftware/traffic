<?xml version="1.0"?>

<!--
	description:

		"Structure of Traffic 3D front end documentation"

	copyright: ""
	license: ""
	date: "$Date:"
	revision: "$Revision:"
-->

<chapter xmlns="http://www.gobosoft.com/eiffel/gobo/documentation" id="sample/with_code">
<chapterinfo>
	<copyright>
		<year>2005</year>
		<holder>David Stefan, Valentin Wuestholz</holder>
	</copyright>
	<author>
		<firstname>David</firstname><surname>Stefan</surname>
	</author>
    <author>
		<firstname>Valentin</firstname><surname>Wuestholz</surname>
	</author>
	<!--<email>bay@inf.ethz.ch</email>-->
	<date>12. September 2005</date>
</chapterinfo>

<title>Structure of project</title>
<section id="page_index">
<title>Page Index</title>
<para>
<itemizedlist>
    <listitem><para>
    	<indexlink url="#scene">CITY_3D_SCENE</indexlink>
    </para></listitem>
    <listitem><para>
    	<indexlink url="#map">MAP</indexlink>
    </para></listitem>
    <listitem><para>
    	<indexlink url="#factories">Factories:</indexlink>
    </para></listitem>
    <listitem><para>
    	<indexlink url="#line_factory">TRAFFIC_LINE_FACTORY</indexlink>
    </para></listitem>
    <listitem><para>
    	<indexlink url="#building_factory">BUILDING_FACTORY</indexlink>
    </para></listitem>
    <listitem><para>
    	<indexlink url="#building_ewer">BUILDING_EWER</indexlink>
    </para></listitem>
     <listitem><para>
    	<indexlink url="#shared_constants">SHARED_CONSTANTS</indexlink>
    </para></listitem>
     <listitem><para>
    	<indexlink url="#utilities">Utilities</indexlink>
    </para></listitem>
</itemizedlist>
</para>
</section>

<section id="scene">
	<title>CITY_3D_SCENE</title>
	<para>
	</para>
	<title>Description</title>
	<para>
	An instance of <classname>CITY_3D_SCENE</classname> is been created by the root class and called using the standard EM procedure.
	It uses the widget toolkit of the EM library to display a panel for the OpenGL visualization of the map and another 
	one used as an toolbar for the different options.
	</para>
	<title>Creation procedure</title>
	<para>
	The creation procedure of the class creates all the needed widgets, such as checkboxes, slidebars or panels, and specify their position, color 
	and properties. If necessary, it subscribes a feature in the appropriate event handler.
	Moreover, it creates an instance of the <classname>MAP</classname> class, which is responsible for all the things that have to be done in order to visualize the map.
	</para>
	<title>Event handling</title>
	<para>
	The event handling of this class is very important as it is the link between the user input and the features of the <classname>MAP</classname> class that do the necessary 
	operation such that the visual effects take place.
	It is important to notice that the instance of the <classname>MAP</classname> class doesn't know it's scene and therefore commands are only 
	given from the scene to the map. If the map has to process information to the scene, such as the name of a marked point, the scene has to subscribe 
	to the event handler of the map and query the information.
	</para>
<toplink/>
</section>

<section id="map">
	<title>MAP</title>
	<para>
	</para>
	<title>Description</title>
	<para>
	This class is the place where all the OpenGL operations are managed. It is also responsible for parsing the map XML file. 
	This means it has a reference of type MAP. Most of the OpenGL operations are realized as simple procedures. 
	Examples of such operations are things like shortest path calculation, lighting and the other options that are available to the user. 
	The whole handling of mouse and keyboard interaction is also handled here. So there are event handlers for things like zooming, 
	translation or rotation.
	</para>
	<title>b.Event handling</title>
	<para>
	 i) Mouse wheel:
	Controls the zooming factor.
	</para>
	<para>
	 ii) Mouse click:
	Is used to mark stations on the map.
	</para>
	<para>
	 i) Mouse wheel:
	Controls the zooming factor.
	</para>
	<para>
	 ii) Mouse click:
	Is used to mark stations on the map.
	</para>
	<para>
	 iii) Mouse dragging:
	1.Right mouse button:
	By dragging the mouse while pressing the right mouse button you are able to translate the position of the maps in the window.
	2.Left mouse button:
	By dragging the mouse while pressing the left mouse button you are able to rotate the map around the the origin.
	</para>
	<para>
	 iv) Keyboard:
	1.by pressing the up-/down- or left-/right- arrow keys the map will be rotated around the x- or y-axis respectively.
	2.By pressing the enter key the map will be moved back to its initial view.
	</para>
	<title>Options</title>
	<para>
	 i) Show a coordinate system
	 </para>
	<para>
	 ii) Enable/Disable lighting of the map
	 </para>
	<para>
	 iii) Change the number of buildings to be displayed on the map
	 </para>
	<para>
	 iv) Highlight the traffic lines by drawing them with different heights on the map
	 </para>
	<para>
	 v) Show the shortest path between the two marked stations.
	 </para>
	<para>
	 vi) Make the buildings transparent
	</para>
<toplink/>
</section>

<section id="factories">
	<title>Factories</title>
	<para>
	</para>
	<title>Description</title>
		Description
	<toplink/>
</section>
	
<section id="line_factory">
	<title>Line factory</title>
	<para>
	</para>
	<title>Description</title>
	<para>
	This class is a factory for creating displayable representations of <classname>TRAFFIC_LINE</classname> objects. 
	It inherits from <classname>EM_3D_OBJECT_FACTORY</classname>, which provides the necessary structures, 
	such as the feature <featurename>create_object</featurename> or <featurename>specify_object</featurename> 
	that states the (OpenGL) commands 
	to create the object and has to be implemented.
	</para>
	<title>Building a line</title>
	<para>
	Each line segment is drawn independently, putting a circle at the beginning and the end to indicate that 
	there're stations there. Next, the polypoints list is traversed and for each two points, a rectangle of 
	width <featurename>line_width</featurename> is created. These rectangles are connected with circles again, but smaller as the ones 
	representing the stations.
	</para>
	<toplink/>
</section>

<section id="building_factory">
	<title>Building factory</title>
	<para>
	</para>
	<title>Description</title>
	<para>
	Similar to <classname>TRAFFIC_LINE_FACTORY</classname>, this class is responsible for creating new buildings 
	and stores the information about the different types, such as central or outlying. 
	</para>
	<title>Type of houses</title>
	<para>
	There're three different typ of houses implemented: city_centre, central and outlying. City_centre is the most central 
	type and its building consist of a cylinder, which is completed by a hemisphere. 
	Central consists of cubes with the same size as the one that are used for outlying, but with a pyramid roof.
	As said before, the third and last type, outlying, are only mere cubs.
	</para>
	<toplink/>
</section>

<section id="building_ewer">
	<title>Building ewer</title>
	<para>
	</para>
	<title>Description</title>
		Description
	<toplink/>
</section>

<section id="shared_constants">
	<title>Shared constants</title>
	<para>
	</para>
	<title>Description</title>
		Description
	<toplink/>
</section>

<section id="utitlites">
	<title>Utilities</title>
	<para>
	</para>
	<title>Description</title>
		Description
	<toplink/>
</section>
	
	
	
<section id="tag_summary">
	<title>Tag Summary</title>

	
  <variablelist>
  	<varlistentry>
  		<term>
  			A little summary for important tags
  		</term>
  		<listitem><para>
  			<![CDATA[<para>]]> : paragraph
  		</para></listitem>
  		<listitem><para>
  			<![CDATA[<programlisting>]]>: mark programcode (see below)
  		</para></listitem>
  		<listitem><para>
  			<![CDATA[<classname>]]> : mark classnames (example: <classname>EM_SURFACE</classname>)
  		</para></listitem>
  		<listitem><para>
  			<![CDATA[<featurename>]]> : mark a featurename (example: <featurename>my_feature</featurename>)
  		</para></listitem>
  		<listitem><para>
  			<![CDATA[<argument>]]> : mark an argument (example: <argument>my_argument</argument>)
  		</para></listitem>
  		<listitem><para>
  			<![CDATA[<comment>]]> : mark a comment (example: <comment>my_comment</comment>)
  		</para></listitem>
  		<listitem><para>
  			<![CDATA[<filename>]]> : mark a comment (example: <filename>my_file.bin</filename>)
  		</para></listitem>
  		<listitem><para>
  			<![CDATA[<expression>]]> : mark an expression (see below)
  		</para></listitem>
  		<listitem><para>
  			<![CDATA[<assign>]]> : mark an assignment (see below) (German: "Zuweisung")
  		</para></listitem>
  		<listitem><para>
  			<![CDATA[<equal>]]> : mark an equality (see below)
  		</para></listitem>


  	</varlistentry>
  </variablelist>
<para>
example:
</para>
<para>
<programlisting>
<text>    </text><featurename>set_foo</featurename> (<argument>a_foo</argument>: like <featurename>foo</featurename>) is
<text>            </text><comment>Set <featurename>foo</featurename> to <argument>a_foo</argument>.</comment>
<text>        </text>require
<text>            </text>a_foo_not_void: <argument>a_foo</argument> /= Void
<text>        </text>do
<text>            </text><assign><target><featurename>foo</featurename></target>
			<expression><argument>a_foo</argument></expression></assign>
<text>        </text>ensure
<text>            </text>foo_set: <equal><expression><featurename>foo</featurename></expression>
					<expression><argument>a_foo</argument></expression></equal>
<text>        </text>end
</programlisting>
</para>
<toplink/>
</section>

</chapter>
