<?xml version="1.0" encoding="UTF-8"?>
<!--
	description:

		"Developer guide for Flat Hunt"

	copyright: "Copyright (c) 2005, Ursina Caluori"
	license: "Eiffel Forum License v2 (see forum.txt)"
	date: "$Date $"
	revision: "$Revision $"
-->
<chapter xmlns="http://www.gobosoft.com/eiffel/gobo/documentation" id="developer_guide/states">
    <chapterinfo>
        <copyright>
            <year>2005</year>
            <holder>Ursina Caluori</holder>
        </copyright>
        <author>
            <firstname>Ursina</firstname>
            <surname>Caluori</surname>
        </author>
        <email>ucaluori@student.ethz.ch</email>
        <date>6 August 2005</date>
    </chapterinfo>
    <title>Chapter 3: The States of the Game</title>

    <para> This chapter is structured as follows: </para>
    <para>
        <itemizedlist>
            <listitem>
                <para>
                    <indexlink url="#overview">Overview</indexlink>
                </para>
            </listitem>
            <listitem>
                <para>
                    <indexlink url="#gameloop">Game Loop</indexlink>
                </para>
            </listitem>
        </itemizedlist>
    </para>
    <section id="overview">
        <title>Overview</title> Every game has at least two states: playing and game over. <para>
            <projectname>Flat Hunt</projectname> has six states in total; three playing states and
            three game over states (see Figure 1). These game states are defined in class
                <classname>GAME_CONSTANTS</classname>:
            <programlisting>Agent_stuck, Agent_stuck, Agent_caught, Agent_escapes, Prepare_state, Play_state, Move_state: INTEGER is unique</programlisting>
        </para>

 
    <para>
        <mediaobjectco>
            <imageobjectco>
                <areaspec>
                    <area />
                </areaspec>
                <imageobject>
                    <imagedata fileref="pic/gameloop_sm.png"></imagedata>
                </imageobject>                
            </imageobjectco>
        </mediaobjectco>
	<emphasis>Figure 1: Game states and loop</emphasis>
    </para>
    
</section>
    <section id="gameloop">
        <title>Game Loop</title>
        <para> For each player in each round in <projectname>Flat Hunt</projectname>, the game goes
            through the following states: <emphasis>Prepare</emphasis>, <emphasis>Play</emphasis>
            and <emphasis>Move</emphasis>. In addition, there are three game over states:
                <emphasis>Agent_stuck</emphasis>, <emphasis>Agent_caught</emphasis> and
                <emphasis>Agent_escaped</emphasis>. </para>
        <para>
            <itemizedlist>
                <listitem>
                    <para>
                        <emphasis>Prepare</emphasis>: If the game is in this state, the current
                        player gets a red circle and the possible moves are calculated and
                        displayed. If the current player is the estate agent, and there are no
                        possible moves, the agent is stuck and thus the game is over (state
                            <emphasis>Agent_stuck</emphasis>). If that is not the case, the game
                        goes in state <emphasis>Play</emphasis>
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis>Play</emphasis>: In this state, if the current player is played by
                        a human, the game waits until the human player clicks on one of the places
                        that are highlighted. If the player is controlled by an artificial
                        intelligence, then the best of the possible moves is calculated. The game
                        then goes in state <emphasis>Move</emphasis>
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis>Move</emphasis>: In this state, the move selected in state
                            <emphasis>Play</emphasis> is performed. After the move, the game checks
                        if the player hits the place of the estate agent. If that is the case, the
                        game goes into state <emphasis>Agent_caught</emphasis>. If the agent did not get caught, and
                        the round number is greater than 23, then the estate agent is the winner and
                        the game goes into state <emphasis>Agent_escaped</emphasis>. If none of the above is the
                        case, then it's the next player's turn and the game loop starts again in
                        state <emphasis>Prepare</emphasis>. </para>
                </listitem>
            </itemizedlist>
        </para>
    </section>
</chapter>
