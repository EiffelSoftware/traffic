<?xml version="1.0" encoding="UTF-8"?>
<!--
	description:

		"Developer guide for Flat Hunt"

	copyright: "Copyright (c) 2005, Ursina Caluori"
	license: "Eiffel Forum License v2 (see forum.txt)"
	date: "$Date $"
	revision: "$Revision $"
-->
<chapter xmlns="http://www.gobosoft.com/eiffel/gobo/documentation" id="developer_guide/design">
    <chapterinfo>
        <copyright>
            <year>2005</year>
            <holder>Ursina Caluori</holder>
        </copyright>
        <author>
            <firstname>Ursina</firstname>
            <surname>Caluori</surname>
        </author>
        <email>ucaluori@student.ethz.ch</email>
        <date>25 September 2005</date>
    </chapterinfo>
    <title>Chapter 2: Design</title>
    <para>
        <emphasis>This and the following chapter should help you understand how the
                <projectname>Flat Hunt</projectname> software is structured. This chapter will give
            you an overview of the whole system organization and then provide an insight to some
            important classes. It is structured as follows:</emphasis>
    </para>
    <para>
        <itemizedlist>
            <listitem>
                <para>
                    <indexlink url="#overview">Overview</indexlink>
                </para>
            </listitem>
            <listitem>
                <para>
                    <indexlink url="#controller">Controller cluster</indexlink>
                </para>
            </listitem>
            <listitem>
                <para>
                    <indexlink url="#model">Model cluster</indexlink>
                </para>
            </listitem>
            <listitem>
                <para>
                    <indexlink url="#view">View cluster</indexlink>
                </para>
            </listitem>
            <listitem>
                <para>
                    <indexlink url="#util">Util cluster</indexlink>
                </para>
            </listitem>
        </itemizedlist>
    </para>
    <section id="overview">
        <title>Overview</title>
        <para> When opening <projectname>Flat Hunt</projectname> in EiffelStudio, the cluster view
            in the bottom left corner of EiffelStudio shows many clusters. For you only the
            top-level clusters <keyword>Traffic</keyword> and <keyword>Flat_hunt</keyword> are
            important.</para>
        <para> To remove complexity, <projectname>Flat Hunt</projectname> is structured in four
            top-level clusters (<emphasis>see Figure 3</emphasis>): <keyword>Model</keyword>,
                <keyword>View</keyword>, <keyword>Controller</keyword> and <keyword>Util</keyword>.
            Some clusters contain sub-clusters and in each cluster there are several classes.
        </para>
        <para>
            <image src="pic/flat_hunt_clusters.png" />
        </para>
        <para>
            <emphasis>Figure 3: Flat Hunt Clusters</emphasis>
            <note> The client-supplier relationship arrows are omitted for the sake of overview.</note>
        </para>
    </section>
    <section id="controller">
        <title>Controller cluster</title>
        <para> Cluster <keyword>Controller</keyword> is the fundamental cluster in <projectname>Flat
                Hunt</projectname>. Here are the classes that "control" the actions. They make sure
            that the displayer classes in cluster <keyword>View</keyword> display the proper
            information, which they get from the <keyword>Model</keyword> classes. For example,
            feature <featurename>prepare</featurename> in class
            <classname>MAIN_CONTROLLER</classname> controls the display update by calling
                <featurename>game_scene.center_on_player (game.current_player)</featurename>. </para>
        <para>
            <itemizedlist>
                <listitem>
                    <para>
                        <strong>MAIN_CONTROLLER</strong>: The <classname>MAIN_CONTROLLER</classname>
                        is (as the name suggests) responsible for many things. It provides access to
                        the <classname>GAME_SCENE</classname>, to class <classname>GAME</classname>
                        and to the whole <libraryname>TRAFFIC</libraryname> library, which is
                        responsible for the visualization of the map. </para>
                </listitem>
                <listitem>
                    <para>
                        <strong>GAME</strong>: Class <classname>GAME</classname> features the game
                        logic. It knows which player's turn it is, and also, since it is an heir of
                            <classname>GAME_CONSTANTS</classname>, what state the game is in.</para>
                </listitem>
            </itemizedlist>
        </para>
        <para>
            <image src="pic/controller.png" />
        </para>
        <para>
            <emphasis>Figure 4: Diagram of the Controller Cluster</emphasis>
        </para>
    </section>
    <section id="model">
        <title>Model cluster</title>
        <para> In the cluster <keyword>Model</keyword>, there are two important parent classes:
            Class <classname>PLAYER</classname> and class <classname>BRAIN</classname>.
                <classname>PLAYER</classname> is the parent of <classname>FLAT_HUNTER</classname>
            and <classname>ESTATE_AGENT</classname>, and <classname>BRAIN</classname> is the parent
            of <classname>HUMAN</classname>, <classname>FLAT_HUNTER_BOT</classname> and
                <classname>ESTATE_AGENT_BOT</classname>. These <keyword>Model</keyword> classes
            describe the internal representation of "real world" objects. Here is a description of
            some of these classes.</para>
        <para>
            <itemizedlist>
                <listitem>
                    <para>
                        <strong>PLAYER</strong>: Class <classname>PLAYER</classname> knows the basic
                        things one needs to know about a player of Flat Hunt, like how many tickets
                        he got left. It features the commands <featurename>play</featurename> and
                            <featurename>move</featurename> and has either a
                        <classname>HUMAN</classname> or a <classname>BOT</classname> brain.</para>
                </listitem>
                <listitem>
                    <para>
                        <strong>ESTATE_AGENT</strong>: This is one of the two heirs of class
                            <classname>PLAYER</classname>. It has some additional information that
                        is special for an estate agent player like knowing where he last showed
                        himself. </para>
                </listitem>
                <listitem>
                    <para>
                        <strong>BRAIN</strong>: Class <classname>BRAIN</classname> includes the
                        intelligence to choose the next move. </para>
                </listitem>
            </itemizedlist>
        </para>
        <para>
            <image src="pic/model.png" />
        </para>
        <para>
            <emphasis>Figure 5: Diagram of the Model Cluster</emphasis> 
        </para>
    </section>
    <section id="view">
        <title>View cluster</title>
        <para> This cluster's job is to make sure that the user sees what is going on. It includes
            all scenes and menus, as well as displayers for the game players and status information. </para>
        <para>
            <itemizedlist>
                <listitem>
                    <para>
                        <strong>PLAYER_DISPLAYER</strong>: This class displays the player on the map and prints the amount of
                        tickets left. <classname>PLAYER_DISPLAYER</classname> knows this information because of the client-supplier
                        relationship with class <classname>PLAYER</classname>.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <strong>GAME_SCENE</strong>: Contains all the drawables of the current game scene and displays them.</para>
                </listitem>
            </itemizedlist>
        </para>
        <para>
            <image src="pic/view.png" />
        </para>
        <para>
            <emphasis>Figure 6: Diagram of the View Cluster</emphasis>
        </para>
    </section>
    <section id="util">
        <title>Util cluster</title>
        <para> Those classes that are not directly part of the game, but rather serve as utils,
            reside in the <keyword>Util</keyword> cluster. For one, there are several menu handling
            classes, which provide the functionality for a normal menu and an option menu. Also
            important are the helper classes like <classname>TEXT_BOX</classname>, which allows to
            comfortably display status messages in a nice translucent box. And last but not least, a
            basic music player with shuffle function can be found here.</para>
    </section>
</chapter>
