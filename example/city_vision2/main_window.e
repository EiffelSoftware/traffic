indexing
	description	: "Main window for this application"
	author		: "Generated by the New Vision2 Application Wizard."
	date		: "$Date: 2007/7/16 12:52:13 $"
	revision	: "1.0.0"

class
	MAIN_WINDOW

inherit
	EV_TITLED_WINDOW
		redefine
			initialize
		end

	INTERFACE_NAMES
		export
			{NONE} all
		undefine
			default_create, copy
		end

create
	default_create

feature {NONE} -- Initialization

	initialize is
			-- Build the interface for this window.
		do
			Precursor {EV_TITLED_WINDOW}

				-- Create and add the menu bar.
--			build_standard_menu_bar
--			set_menu_bar (standard_menu_bar)

				-- Create and add the toolbar.
			build_standard_toolbar
			upper_bar.extend (create {EV_HORIZONTAL_SEPARATOR})
			upper_bar.extend (standard_toolbar)

				-- Create and add the status bar.
			build_standard_status_bar
			lower_bar.extend (standard_status_bar)

			build_main_container
			extend (main_container)

				-- Execute `request_close_window' when the user clicks
				-- on the cross in the title bar.
			close_request_actions.extend (agent request_close_window)

				-- Set the title of the window
			set_title (Window_title)

				-- Set the initial size of the window
			set_size ((canvas.width*1.2).floor, (canvas.height*1.2).floor)

			create random.set_seed (198273)
		end


feature {NONE} -- Menu Implementation

	standard_menu_bar: EV_MENU_BAR
			-- Standard menu bar for this window.

	file_menu: EV_MENU
			-- "File" menu for this window (contains New, Open, Close, Exit...)

	help_menu: EV_MENU
			-- "Help" menu for this window (contains About...)

	build_standard_menu_bar is
			-- Create and populate `standard_menu_bar'.
		require
			menu_bar_not_yet_created: standard_menu_bar = Void
		do
				-- Create the menu bar.
			create standard_menu_bar

				-- Add the "File" menu
			build_file_menu
			standard_menu_bar.extend (file_menu)

				-- Add the "Help" menu
			build_help_menu
			standard_menu_bar.extend (help_menu)
		ensure
			menu_bar_created:
				standard_menu_bar /= Void and then
				not standard_menu_bar.is_empty
		end

	build_file_menu is
			-- Create and populate `file_menu'.
		require
			file_menu_not_yet_created: file_menu = Void
		local
			menu_item: EV_MENU_ITEM
		do
			create file_menu.make_with_text (Menu_file_item)

			create menu_item.make_with_text (Menu_file_new_item)
				--| TODO: Add the action associated with "New" here.
			file_menu.extend (menu_item)

			create menu_item.make_with_text (Menu_file_open_item)
			menu_item.select_actions.extend (agent choose_file)
				--| TODO: Add the action associated with "Open" here.
			file_menu.extend (menu_item)

			create menu_item.make_with_text (Menu_file_save_item)
				--| TODO: Add the action associated with "Save" here.
			file_menu.extend (menu_item)

			create menu_item.make_with_text (Menu_file_saveas_item)
				--| TODO: Add the action associated with "Save As..." here.
			file_menu.extend (menu_item)

			create menu_item.make_with_text (Menu_file_close_item)
				--| TODO: Add the action associated with "Close" here.
			file_menu.extend (menu_item)

			file_menu.extend (create {EV_MENU_SEPARATOR})

				-- Create the File/Exit menu item and make it call
				-- `request_close_window' when it is selected.
			create menu_item.make_with_text (Menu_file_exit_item)
			menu_item.select_actions.extend (agent request_close_window)
			file_menu.extend (menu_item)
		ensure
			file_menu_created: file_menu /= Void and then not file_menu.is_empty
		end

	build_help_menu is
			-- Create and populate `help_menu'.
		require
			help_menu_not_yet_created: help_menu = Void
		local
			menu_item: EV_MENU_ITEM
		do
			create help_menu.make_with_text (Menu_help_item)

			create menu_item.make_with_text (Menu_help_contents_item)
				--| TODO: Add the action associated with "Contents and Index" here.
			help_menu.extend (menu_item)

			create menu_item.make_with_text (Menu_help_about_item)
			menu_item.select_actions.extend (agent on_about)
			help_menu.extend (menu_item)
		ensure
			help_menu_created: help_menu /= Void and then not help_menu.is_empty
		end

feature {NONE} -- ToolBar Implementation

	standard_toolbar: EV_TOOL_BAR
			-- Standard toolbar for this window

	build_standard_toolbar is
			-- Create and populate the standard toolbar.
		require
			toolbar_not_yet_created: standard_toolbar = Void
		local
			toolbar_item: EV_TOOL_BAR_BUTTON
			toolbar_pixmap: EV_PIXMAP
		do
				-- Create the toolbar.
			create standard_toolbar

			create toolbar_item
			create toolbar_pixmap
			toolbar_pixmap.set_with_named_file ("new.png")
			toolbar_item.set_pixmap (toolbar_pixmap)
			standard_toolbar.extend (toolbar_item)

			create toolbar_item
			create toolbar_pixmap
			toolbar_pixmap.set_with_named_file ("open.png")
			toolbar_item.set_pixmap (toolbar_pixmap)
			toolbar_item.select_actions.extend (agent choose_file)
			standard_toolbar.extend (toolbar_item)

			create toolbar_item
			create toolbar_pixmap
			toolbar_pixmap.set_with_named_file ("save.png")
			toolbar_item.set_pixmap (toolbar_pixmap)
			standard_toolbar.extend (toolbar_item)
		ensure
			toolbar_created: standard_toolbar /= Void and then  not standard_toolbar.is_empty
		end

feature {NONE} -- StatusBar Implementation

	standard_status_bar: EV_STATUS_BAR
			-- Standard status bar for this window

	standard_status_label: EV_LABEL
			-- Label situated in the standard status bar.
			--
			-- Note: Call `standard_status_label.set_text (...)' to change the text
			--       displayed in the status bar.

	build_standard_status_bar is
			-- Create and populate the standard toolbar.
		require
			status_bar_not_yet_created:
				standard_status_bar = Void and then
				standard_status_label = Void
		local
			env: EV_ENVIRONMENT
		do
				-- Create the status bar.
			create standard_status_bar
			standard_status_bar.set_border_width (2)

				-- Populate the status bar.
			create standard_status_label.make_with_text ("Add your status text here...")
			standard_status_label.align_text_left
			standard_status_bar.extend (standard_status_label)

			create env
			env.application.add_idle_action (agent update_status_label)
		ensure
			status_bar_created:
				standard_status_bar /= Void and then
				standard_status_label /= Void
		end

feature {NONE} -- About Dialog Implementation

	on_about is
			-- Display the About dialog.
		local
			about_dialog: ABOUT_DIALOG
		do
			create about_dialog
			about_dialog.show_modal_to_window (Current)
		end

feature {NONE} -- Implementation, Close event

	request_close_window is
			-- The user wants to close the window
		local
			question_dialog: EV_CONFIRMATION_DIALOG
		do
			create question_dialog.make_with_text (Label_confirm_close_window)
			question_dialog.show_modal_to_window (Current)

			if question_dialog.selected_button.is_equal ((create {EV_DIALOG_CONSTANTS}).ev_ok) then
					-- Destroy the window
				destroy;

					-- End the application
					--| TODO: Remove this line if you don't want the application
					--|       to end when the first window is closed..
				(create {EV_ENVIRONMENT}).application.destroy
			end
		end

	choose_file is
			-- Open file dialog and choose a map to load.
		local
			dlg: EV_FILE_OPEN_DIALOG
		do
			create dlg.make_with_title ("Open map file")
			dlg.filters.extend (["*.xml", "Traffic xml files (*.xml)"] )
			dlg.ok_actions.extend (agent open_file (dlg))
			dlg.show_modal_to_window (Current)
		end

	open_file (a_dlg: EV_FILE_OPEN_DIALOG) is
			-- File dialog was closed, now load a map.
		local
			loader: TRAFFIC_MAP_LOADER
			dlg: EV_MESSAGE_DIALOG
			n,i: INTEGER
			s: STRING
			list: LIST [STRING]
			w: INTEGER
			h: INTEGER
		do
			create loader.make (a_dlg.file_name)
			loader.enable_dump_loading
			loader.load_map
			if not loader.has_error then
				if canvas.map /= Void and then canvas.map.time.is_time_running then
					canvas.map.time.reset
				end
				canvas.set_map (loader.map)
				create point_randomizer.make (loader.map.center, loader.map.radius)
				create path_randomizer.set_map (loader.map)
				resize_canvas
				add_buildings
				canvas.map.time.set_speedup (50)
				canvas.map.time.start
				move_to_center
			else
				create dlg.make_with_text ("Error parsing" + a_dlg.file_name)
				io.put_string ("bad error!!")
				dlg.show
			end
		end

	add_buildings is
			-- Add buildings to the city.
		local
			b: TRAFFIC_BUILDING
			r: TRAFFIC_BUILDING_RANDOMIZER
		do
			create r.set_map (canvas.map)
			r.generate_random_buildings (10, canvas.map.radius/3, 3)
			canvas.map.buildings.append_last (r.last_buildings)
			r.generate_random_buildings (15, canvas.map.radius*2/3, 2)
			canvas.map.buildings.append_last (r.last_buildings)
			r.generate_random_buildings (100, canvas.map.radius, 1)
			canvas.map.buildings.append_last (r.last_buildings)
		end

	add_line_vehicles (a_value: INTEGER) is
			-- Add as many line vehicles to the city, so that there are `a_value' per line (or remove some if needed).
		local
			tram: TRAFFIC_TRAM
			train: TRAFFIC_TRAM -- Todo add trains
			bus: TRAFFIC_BUS
			i: INTEGER
		do
			if canvas.map /= Void then
				canvas.map.trams.wipe_out
				canvas.map.busses.wipe_out
				if a_value > 0 then
					from
						canvas.map.lines.start
					until
						canvas.map.lines.after
					loop
						from
							i := 1
						until
							i > a_value or else i = canvas.map.lines.item_for_iteration.count
						loop
							if canvas.map.lines.item_for_iteration.type.name.is_equal ("tram") then
								create tram.make_with_line (canvas.map.lines.item_for_iteration)
								tram.set_to_station (canvas.map.lines.item_for_iteration.item (i).origin)
								canvas.map.trams.put_last (tram)
								io.put_string (canvas.map.lines.item_for_iteration.name + " Tram " + tram.position.out + "%N")
								tram.start
							elseif canvas.map.lines.item_for_iteration.type.name.is_equal ("bus") then
								create bus.make_with_line (canvas.map.lines.item_for_iteration)
								bus.set_to_station (canvas.map.lines.item_for_iteration.item (i).origin)
								bus.set_speed (5)
								canvas.map.busses.put_last (bus)
								io.put_string (canvas.map.lines.item_for_iteration.name + " Bus " + bus.position.out + "%N")
								bus.start
							end
							i := i + 1
						end
						canvas.map.lines.forth
					end
				end
			end
		end

	add_free_movings (a_value: INTEGER) is
			-- Add `a_value' number of free moving objects (or remove some if needed).
		local
			moving: TRAFFIC_FREE_MOVING
		do
			if canvas.map /= Void then
				if a_value > canvas.map.free_movings.count then
					-- Add more
					from
					until
						canvas.map.free_movings.count >= a_value
					loop
						point_randomizer.generate_point_array (7)
						create moving.make_with_points (point_randomizer.last_array, 1.5)
						canvas.map.free_movings.put_last (moving)
						moving.set_reiterate (True)
						moving.start
					end
				elseif a_value < canvas.map.free_movings.count then
					-- Remove
					canvas.map.free_movings.prune_last (canvas.map.free_movings.count - a_value)
				end
			end
		end

	add_passengers (a_value: INTEGER) is
			-- Add `a_value' number of passengers (or remove some if needed).
		local
			passenger: TRAFFIC_PASSENGER
			i: INTEGER
			path_finder: TRAFFIC_PATH_CALCULATOR
		do
			if a_value > canvas.map.passengers.count then
				-- Add more
				from
				until
					canvas.map.passengers.count >= a_value
				loop
					path_randomizer.generate_path (6)
					random.forth

					create passenger.make_with_path (path_randomizer.last_path, random.double_item*3 + 0.1)
					canvas.map.passengers.put_last (passenger)
					passenger.set_reiterate (True)
					passenger.start
					i := i + 1
				end
			elseif a_value < canvas.map.passengers.count then
				-- Remove
				canvas.map.passengers.prune_last (canvas.map.passengers.count - a_value)
			end
		end

	add_paths (a_value: INTEGER) is
			-- Add `a_value' number of paths to the city (or remove if needed).
		local
			i, g, b: INTEGER
			p: ARRAY [TRAFFIC_PLACE]
			p1, p2: TRAFFIC_PLACE
			c: TRAFFIC_PATH_CALCULATOR
		do
			if a_value > canvas.map.paths.count then
				-- Add more
				p := canvas.map.places.to_array
				create c.set_map (canvas.map)
--				if path_checkbox.is_checked then
--					c.set_shortest_path_mode (c.shortest_path_mode_minimal_switches)
--				end
				from
				until
					canvas.map.paths.count >= a_value
				loop
					random.forth
					p1 := p.item (random.item \\ p.count + 1)
					random.forth
					p2 := p.item (random.item \\ p.count + 1)
					if p1 /= p2 then
						c.find_shortest_path (p1, p2)
						random.forth
						g := random.item \\ 256
						random.forth
						b := random.item \\ 256
						canvas.map.paths.put_last (c.path)
						io.put_string (c.path.out + "%N")
--						canvas.paths_representation.set_colors (create {EM_COLOR}.make_with_rgb (255, g, b), create {EM_COLOR}.make_with_rgb (255, g, b))
--						event_loop.process_events
					end
				end
			elseif a_value < canvas.map.paths.count then
				-- Remove
				canvas.map.paths.prune_last (canvas.map.paths.count - a_value)
			end
		end

	toggle_map_hidden (a_check_box: EV_CHECK_BUTTON) is
			--
		do
			if a_check_box.is_selected then
				canvas.disable_map_hidden
			else
				canvas.enable_map_hidden
			end
		end

	toggle_lines_hidden (a_check_box: EV_CHECK_BUTTON) is
			--
		do
			if a_check_box.is_selected then
				canvas.line_representations.show
			else
				canvas.line_representations.hide
			end
		end

	toggle_roads_hidden (a_check_box: EV_CHECK_BUTTON) is
			--
		do
			if a_check_box.is_selected then
				canvas.road_representations.show
			else
				canvas.road_representations.hide
			end
		end

	update_status_label is
			--
		do
			if canvas.map /= Void and then canvas.map.time.is_time_running then
				standard_status_label.set_text (canvas.map.time.out)
			end
		end

	resize_canvas is
			-- Set up canvas.
		local
			w: INTEGER
			h: INTEGER
		do
			w := (viewport.width).max (1)
			h := (viewport.height).max (1)
			canvas.set_size (w, h)
			canvas.set_minimum_size (w, h)
			viewport.set_item_size (w, h)
		end

	move_to_center is
			-- Center map on screen.
		local
			r: EV_RECTANGLE
			xdiff, ydiff: DOUBLE
			map_center, canvas_center: REAL_COORDINATE
		do
			canvas_center := client_to_map_coordinates ((canvas.width/2).floor, (canvas.height/2).floor)
			xdiff := canvas.map.center.x - canvas_center.x
			ydiff := (-1)*canvas.map.center.y - canvas_center.y
			if xdiff /= 0 or ydiff /= 0 then
				canvas.go_down (ydiff)
				canvas.go_left (xdiff)
			end
			canvas.redraw
		end

feature {NONE} -- Implementation

	point_randomizer: TRAFFIC_POINT_RANDOMIZER
			-- Generator for list of random points

	path_randomizer: TRAFFIC_PATH_RANDOMIZER
			-- Generator for random paths

	random: RANDOM
			-- Random number generator for passenger speed

	main_container: EV_VERTICAL_BOX
			-- Main container (contains all widgets displayed in this window)

	canvas: TRAFFIC_MAP_CANVAS
			-- The Canvas Widget

	viewport: EV_VIEWPORT
			-- To display the canvas

	build_main_container is
			-- Create and populate `main_container'.
		require
			main_container_not_yet_created: main_container = Void
		local
			vb: EV_VERTICAL_SPLIT_AREA
			hb1, hb2: EV_HORIZONTAL_BOX
			fr: EV_FRAME
			r: EV_HORIZONTAL_RANGE
			l: EV_LABEL
			rad: EV_CHECK_BUTTON
			table: EV_TABLE
			fixed: EV_FIXED
		do
			create viewport
			viewport.set_offset (0, 0)
			create vb
			create hb1
			create fr
			create canvas.make
			create main_container
			create table
			create fixed

			viewport.set_minimum_height (400)
			viewport.set_minimum_width (600)
			viewport.extend (canvas)
			fr.extend (viewport)
			canvas.set_zoom_limits (0.5, 10.0)
			viewport.resize_actions.force_extend (agent resize_canvas)

			-- free movings
			create l.make_with_text ("Free movings (0..100):")
			create r.make_with_value_range (create {INTEGER_INTERVAL}.make (0, 100))
			r.set_value (0)
			r.set_minimum_width (100)
			r.change_actions.extend (agent add_free_movings)
			fixed.extend (l)
			fixed.extend (r)
			fixed.set_item_position (l, 5, 7)
			fixed.set_item_position_and_size (r, 130, 5, 100, 20)

			-- Line vehicles
			create l.make_with_text ("Vehicles/Line (0..10):")
			create r.make_with_value_range (create {INTEGER_INTERVAL}.make (0, 10))
			r.set_value (0)
			r.set_minimum_width (100)
			r.change_actions.extend (agent add_line_vehicles)
			fixed.extend (l)
			fixed.extend (r)
			fixed.set_item_position (l, 5, 42)
			fixed.set_item_position_and_size (r, 130, 40, 100, 20)

			-- Passengers
			create l.make_with_text ("Passengers (0..100):")
			create r.make_with_value_range (create {INTEGER_INTERVAL}.make (0, 100))
			r.set_value (0)
			r.set_minimum_width (100)
			r.change_actions.extend (agent add_passengers)
			fixed.extend (l)
			fixed.extend (r)
			fixed.set_item_position (l, 5, 82)
			fixed.set_item_position_and_size (r, 130, 80, 100, 20)

			-- Paths
			create l.make_with_text ("Paths (0..10):")
			create r.make_with_value_range (create {INTEGER_INTERVAL}.make (0, 10))
			r.set_value (0)
			r.set_minimum_width (100)
			r.change_actions.extend (agent add_paths)
			fixed.extend (l)
			fixed.extend (r)
			fixed.set_item_position (l, 5, 122)
			fixed.set_item_position_and_size (r, 130, 120, 100, 20)

			-- Hide/show map
			create rad.make_with_text ("Show map")
			rad.toggle
			rad.select_actions.extend (agent toggle_map_hidden (rad))
			fixed.extend (rad)
			fixed.set_item_position (rad, 5, 162)

			-- Hide/show lines
			create rad.make_with_text ("Show lines")
			rad.toggle
			rad.select_actions.extend (agent toggle_lines_hidden (rad))
			fixed.extend (rad)
			fixed.set_item_position (rad, 85, 162)

			-- Hide/show lines
			create rad.make_with_text ("Show roads")
			rad.toggle
			rad.select_actions.extend (agent toggle_roads_hidden (rad))
			fixed.extend (rad)
			fixed.set_item_position (rad, 165, 162)

			vb.extend (fixed)
			vb.disable_item_expand (fixed)


--			table.add (create {EV_HORIZONTAL_BOX}, 1, 3, 2, 1)

--			vb.extend (table)
--			vb.disable_item_expand (table)
			hb1.extend (vb)
			hb1.disable_item_expand (vb)

			hb1.extend (fr)

--			hb1.extend (tool_bar)
--			hb1.extend (fr)
--			hb1.disable_item_expand (tool_bar)

--			vb.extend (hb1)
----			vb.extend (traffic_console)
--			hb2.extend (vb)
--			hb2.extend (button_panel)
--			hb2.disable_item_expand (button_panel)
			main_container.extend (hb1)
			main_container.set_padding (10)


		ensure
			main_container_created: main_container /= Void
		end

feature -- Conversion

	client_to_map_coordinates (x, y: INTEGER): REAL_COORDINATE is
			-- Map position corresponding to client coordinates (`x', `y')
		local
			lx: DOUBLE
			ly: DOUBLE
			xperc: DOUBLE
			yperc: DOUBLE
			h: INTEGER
			org: REAL_COORDINATE
		do
			lx := x / 1
			ly := y / 1

			xperc := lx / (canvas.parent.client_width)
			h := (canvas.parent.client_height).max (1)
			yperc := (h - ly) / h

			org := canvas.visible_area.lower_left
			create Result.make (
				(org.x + xperc * canvas.visible_area.width).rounded,
				(org.y + yperc * canvas.visible_area.height).rounded)

		ensure
			Result_exists: Result /= Void
		end

feature {NONE} -- Implementation / Constants

	Window_title: STRING is "city_vision2"
			-- Title of the window.

	Window_width: INTEGER is 400
			-- Initial width for this window.

	Window_height: INTEGER is 400
			-- Initial height for this window.

end -- class MAIN_WINDOW
