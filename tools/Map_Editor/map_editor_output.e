indexing
	description: "Various methods of output for a loaded traffic map"
	author: "Fabio Maninchedda and Daniel Saner"
	date: "$Date$"
	revision: "$Revision$"

class
	MAP_EDITOR_OUTPUT

create
	make_with_map
	
feature		-- Initialisation
	
	make_with_map(a_map: TRAFFIC_MAP) is
			-- Create an output object based on the specified map.
		require
			a_map_not_void: a_map /= Void
		do
			map := a_map
		ensure
			map_is_referenced: map = a_map
		end
		
		
feature		-- XML output methods


	create_xml_output is
			-- Create the string array for XML output. This turns the map file with which this output object has
			-- been created into valid, Traffic / Flat Hunt compatible XML code, which is then first stored in
			-- an array of strings, which can later be put out to various places.
		local
			i_th: INTEGER
			temporary_hash_array: ARRAY [STRING]								-- Temporary array for places, lines etc.
			coordinate_x, coordinate_y: INTEGER
		do
			create output_xml.make
			output_xml.extend ("<?xml version=%"1.0%"?>")						-- The standard file header
			output_xml.extend ("<!DOCTYPE city SYSTEM %"map.dtd%">")
			output_xml.extend ("<!-- Generated by the Flat Hunt Map Editor -->")
			output_xml.extend ("<map name=%"" + map.name + "%">")				-- Map tag
			output_xml.extend ("")
			output_xml.extend ("<description text=%"" + map.description + "%" />")	-- Map description Tag
			output_xml.extend ("")
			output_xml.extend ("<places>")										-- Here begins the places section of the XML file
			output_xml.extend ("")
			temporary_hash_array := map.places.current_keys
			from																-- This loop adds the tags for each place of the map file.
				i_th := 1														-- It adds the coordinates to EVERY place, not only those
			until																-- that already had coordinates associated with them (but
				i_th = temporary_hash_array.count + 1							-- only via the line segments), which results in XML files
			loop																-- that are even cleaner than the official Traffic examples.
				coordinate_x := map.places.item (temporary_hash_array.item (i_th)).position.x.rounded
				coordinate_y := map.places.item (temporary_hash_array.item (i_th)).position.y.rounded
				output_xml.extend ("  <place name=%"" + map.places.item (temporary_hash_array.item (i_th)).name + "%" x=%"" + coordinate_x.out + "%" y=%"" + coordinate_y.out + "%"/>")
				i_th := i_th + 1
			end
			output_xml.extend ("</places>")
			output_xml.extend ("")
			output_xml.extend ("")
			output_xml.extend ("<lines>")										-- Here begins the lines section of the XML file
			output_xml.extend ("")
			output_xml.extend ("")
			temporary_hash_array := map.lines.current_keys
			from																-- Three nested loops to add the tags for every turning point,
				i_th := 1														-- of every line segment, of every line of the map!
			until
				i_th = temporary_hash_array.count + 1				
			loop
				output_xml.extend ("<line name=%"" + map.lines.item (temporary_hash_array.item (i_th)).name + "%" type=%"" + map.lines.item (temporary_hash_array.item (i_th)).type.name + "%">")
				output_xml.extend ("  <color red=%"" + map.lines.item (temporary_hash_array.item (i_th)).color.red.out + "%" green=%"" + map.lines.item (temporary_hash_array.item (i_th)).color.green.out + "%" blue=%"" + map.lines.item (temporary_hash_array.item (i_th)).color.blue.out + "%"/>")
				from
					map.lines.item (temporary_hash_array.item (i_th)).start
				until
					map.lines.item (temporary_hash_array.item (i_th)).index = (map.lines.item (temporary_hash_array.item (i_th)).count // 2) + 1
				loop
					output_xml.extend ("  <line_section from=%"" + map.lines.item (temporary_hash_array.item (i_th)).item.origin.name + "%" to=%"" + map.lines.item (temporary_hash_array.item (i_th)).item.destination.name + "%" direction=%"undirected%">")
					from
						map.lines.item (temporary_hash_array.item (i_th)).item.polypoints.start
					until
						map.lines.item (temporary_hash_array.item (i_th)).item.polypoints.after
					loop
						output_xml.extend ("    <point x=%"" + map.lines.item (temporary_hash_array.item(i_th)).item.polypoints.item.x.rounded.out + "%" y=%"" + map.lines.item (temporary_hash_array.item(i_th)).item.polypoints.item.y.rounded.out + "%"/>")
						map.lines.item (temporary_hash_array.item (i_th)).item.polypoints.forth
					end
					output_xml.extend ("  </line_section>")
					map.lines.item (temporary_hash_array.item (i_th)).forth
				end					
				output_xml.extend ("</line>")
				output_xml.extend ("")
				output_xml.extend ("")
				i_th := i_th + 1
			end
			output_xml.extend ("</lines>")
			output_xml.extend ("")
			output_xml.extend ("")
			output_xml.extend ("</map>")
		ensure
			output_created: output_xml /= Void
			output_not_empty: output_xml.count > 1
		end
	
	output_to_xml(a_target_filename: STRING) is
			-- Write the map to a Flat Hunt compatible XML file. No further or previous feature calls needed if the
			-- output object has been created with a correct Traffic map.
		require
			a_target_filename_not_void: a_target_filename /= Void
		do
			create_xml_output												-- Create the XML string array
			create output_xml_filesystem									-- Open the file system for file output
			output_xml_file := output_xml_filesystem.windows_file_system.new_output_file (a_target_filename)	-- Create a new file
			output_xml_file.open_write										-- Open the new file for output (gay)
			from
				output_xml.start											-- Loop to write every string of the array to the new file
			until
				output_xml.after
			loop
				output_xml_file.put_string (output_xml.item)
				output_xml_file.put_new_line
				output_xml.forth
			end
			output_xml_file.close											-- Close the file handler again
		end
		
	output_xml_to_console is
			-- Write the map's XML code to the system console
		do
			create_xml_output												-- Create the XML string array
			from
				output_xml.start											-- Loop to put out every string on the console
			until
				output_xml.after
			loop
				io.put_string (output_xml.item)
				io.put_string ("%N")
				output_xml.forth
			end
		end
		

feature
	
	-- Output objects
	
	output_xml_filesystem: KL_SHARED_FILE_SYSTEM		-- The file handler for XML output
	output_xml_file: KL_WINDOWS_OUTPUT_FILE				-- The target output XML file
	output_xml: LINKED_LIST	[STRING]					-- The raw XML output, as an array of strings
	
	map: TRAFFIC_MAP									-- Referencing the map object
		
		

end
