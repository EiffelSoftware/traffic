system
	"map_editor"

root
	ROOT_CLASS: make

default
	cls_compliant (yes)
	dotnet_naming_convention (no)
	il_verifiable (yes)
	msil_generation_type ("exe")
	assertion (no)
	disabled_debug (yes)
	disabled_debug ("gelex")
	disabled_debug ("geyacc")
	disabled_debug ("in_degree")
	disabled_debug ("left")
	disabled_debug ("refactor_fixme")
	disabled_debug ("xml_input_stream")
	disabled_debug ("xml_parser")
	debug (no)
	line_generation (no)
	profile (yes)
	trace (no)
	check_vape (yes)
	console_application (no)
	syntax_warning (no)
	address_expression (no)
	array_optimization (no)
	dead_code_removal (yes)
	dynamic_runtime (no)
	exception_trace (no)
	inlining (no)
	multithreaded (no)


cluster
	map_editor:		"."


	ise:		"${ISE_EIFFEL}/library"

	library base (ise):		"$/base"
		exclude
			"table_eiffel3"; "desc"; 
		end

	time (ise):		"$/time"

	format (time):		"$/format"

	english (format):		"$/english"

	ewg_runtime:		"${EWG}/library/runtime/eiffel"

	ewg_spec (ewg_runtime):		"$/spec"

	ewg_runtime_spec_ise (ewg_spec):		"$/ise"

	em:		"${EM}/library"

	highscore (em):		"$/highscore"

	settings (em):		"$/settings"

	audio (em):		"$/audio"

	cdrom (em):		"$/cdrom"

	event (em):		"$/event"

	timer (em):		"$/timer"

	utility (em):		"$/utility"

	goof (em):		"$/goof"

	"object" (goof):		"$/object"

	xy ("object"):		"$/xy"

	xz ("object"):		"$/xz"

	force (goof):		"$/force"

	collision (goof):		"$/collision"

	loader (goof):		"$/loader"

	joystick (em):		"$/joystick"

	network (em):		"$/network"

	classic (network):		"$/classic"

	multiplayer (network):		"$/multiplayer"

	net_system_objects (multiplayer):		"$/net_system_objects"

	net_system_events (multiplayer):		"$/net_system_events"

	video (em):		"$/video"

	video_decoder (video):		"$/video_decoder"

	ev_widget (video):		"$/ev_widget"

	implementation (ev_widget):		"$/implementation"

	mswin (implementation):		"$/mswin"

	implementation_interface (implementation):		"$/implementation_interface"

	interface (ev_widget):		"$/interface"

	animation (video):		"$/animation"

	collision_detection (video):		"$/collision_detection"

	font (video):		"$/font"

	figure (video):		"$/figure"

	container (video):		"$/container"

	opengl (video):		"$/opengl"

	widget (em):		"$/widget"

	background (widget):		"$/background"

	border (widget):		"$/border"

	input (widget):		"$/input"

	widgets (widget):		"$/widgets"

	delegates (widget):		"$/delegates"

	basic_delegates (delegates):		"$/basic_delegates"

	eclipse_delegates (delegates):		"$/eclipse_delegates"

	generated_wrapper (em):		"$/generated_wrapper"

	eiffel (generated_wrapper):		"$/eiffel"

	sdl_external_external (eiffel):		"$/external"

	sdl_external_struct (sdl_external_external):		"$/struct"

	sdl_external_struct_spec (sdl_external_struct):		"$/spec"

	sdl_external_struct_ise (sdl_external_struct_spec):		"$/ise"

	sdl_external_enum (sdl_external_external):		"$/enum"

	sdl_external_enum_spec (sdl_external_enum):		"$/spec"

	sdl_external_enum_ise (sdl_external_enum_spec):		"$/ise"

	sdl_external_union (sdl_external_external):		"$/union"

	sdl_external_union_spec (sdl_external_union):		"$/spec"

	sdl_external_union_ise (sdl_external_union_spec):		"$/ise"

	sdl_external_function (sdl_external_external):		"$/function"

	sdl_external_function_spec (sdl_external_function):		"$/spec"

	sdl_external_function_ise (sdl_external_function_spec):		"$/ise"

	sdl_abstraction_abstraction (eiffel):		"$/abstraction"

	sdl_abstraction_struct (sdl_abstraction_abstraction):		"$/struct"

	sdl_abstraction_function (sdl_abstraction_abstraction):		"$/function"

	sdl_abstraction_callback (sdl_abstraction_abstraction):		"$/callback"

	sdl_abstraction_union (sdl_abstraction_abstraction):		"$/union"

	traffic:		"../Traffic2/library"

	traffic_utility (traffic):		"../Traffic2/library\utility"

	traffic_base_extension (traffic_utility):		"../Traffic/library\utility\base_extension"

	traffic_dispenser (traffic_base_extension):		"../Traffic2/library\utility\base_extension\dispenser"

	graph_graph (traffic_base_extension):		"../Traffic2/library\utility\base_extension\graph"

	graph_implementation (graph_graph):		"../Traffic2/library\utility\base_extension\graph\implementation"

	graph_adjacency_matrix_graph (graph_implementation):		"../Traffic2/library\utility\base_extension\graph\implementation\adjacency_matrix_graph"

	graph_linked_graph (graph_implementation):		"../Traffic2/library\utility\base_extension\graph\implementation\linked_graph"

	graph_structure (graph_graph):		"../Traffic2/library\utility\base_extension\graph\structure"

	graph_walker (graph_graph):		"../Traffic2/library\utility\base_extension\graph\walker"

	traffic_topological_sort (traffic_base_extension):		"../Traffic2/library\utility\base_extension\topological_sort"

	traffic_tree (traffic_base_extension):		"../Traffic2/library\utility\base_extension\tree"

	traffic_union_find (traffic_base_extension):		"../Traffic2/library\utility\base_extension\union_find"

	traffic_gl_tools (traffic_utility):		"../Traffic2/library\utility\gl_tools"

	visualization (traffic):		"../Traffic2/library\visualization"

	visualization_2d (visualization):		"../Traffic2/library\visualization\visualization_2d"

	visualization_3d (visualization):		"../Traffic2/library\visualization\visualization_3d"

	type (traffic):		"../Traffic2/library\type"

	traffic_input (traffic):		"../Traffic2/library\input"

	factory (traffic):		"../Traffic2/library\factory"

	kl_kernel:		"${GOBO}/library/kernel"

	kl_basic (kl_kernel):		"$/basic"

	kl_elks (kl_kernel):		"$/elks"

	kl_io (kl_kernel):		"$/io"

	kl_misc (kl_kernel):		"$/misc"

	kl_unicode (kl_kernel):		"$/unicode"

	kl_support (kl_kernel):		"$/support"

	kl_spec (kl_kernel):		"$/spec"

	kl_spec_ise (kl_spec):		"$/ise"

	lx_lexical:		"${GOBO}/library/lexical"

	lx_automaton (lx_lexical):		"$/automaton"

	lx_error (lx_lexical):		"$/error"

	lx_generation (lx_lexical):		"$/generation"

	lx_lex (lx_lexical):		"$/lex"

	lx_regexp (lx_lexical):		"$/regexp"

	lx_scanner (lx_lexical):		"$/scanner"

	lx_skeleton (lx_lexical):		"$/skeleton"

	lx_support (lx_lexical):		"$/support"

	ma_math:		"${GOBO}/library/math"

	ma_decimal (ma_math):		"$/decimal"

	pr_parse:		"${GOBO}/library/parse"

	pr_error (pr_parse):		"$/error"

	pr_fsm (pr_parse):		"$/fsm"

	pr_generation (pr_parse):		"$/generation"

	pr_grammar (pr_parse):		"$/grammar"

	pr_parser (pr_parse):		"$/parser"

	pr_skeleton (pr_parse):		"$/skeleton"

	pr_support (pr_parse):		"$/support"

	pr_yacc (pr_parse):		"$/yacc"

	dp_pattern:		"${GOBO}/library/pattern"

	dp_bridge (dp_pattern):		"$/bridge"

	dp_command (dp_pattern):		"$/command"

	rx_regexp:		"${GOBO}/library/regexp"

	rx_interface (rx_regexp):		"$/interface"

	rx_pcre (rx_regexp):		"$/pcre"

	rx_support (rx_regexp):		"$/support"

	st_string:		"${GOBO}/library/string"

	st_collation (st_string):		"$/collation"

	st_unicode (st_string):		"$/unicode"

	st_support (st_string):		"$/support"

	st_formatter (st_string):		"$/formatter"

	st_general (st_formatter):		"$/general"

	st_parameter (st_formatter):		"$/parameter"

	ds_structure:		"${GOBO}/library/structure"

	ds_container (ds_structure):		"$/container"

	ds_dispenser (ds_structure):		"$/dispenser"

	ds_list (ds_structure):		"$/list"

	ds_set (ds_structure):		"$/set"

	ds_sort (ds_structure):		"$/sort"

	ds_support (ds_structure):		"$/support"

	ds_table (ds_structure):		"$/table"

	ts_test:		"${GOBO}/library/test"

	ts_generation (ts_test):		"$/generation"

	ts_harness (ts_test):		"$/harness"

	dt_time:		"${GOBO}/library/time"

	dt_clock (dt_time):		"$/clock"

	dt_date (dt_time):		"$/date"

	dt_format (dt_time):		"$/format"

	dt_time_zone (dt_time):		"$/time_zone"

	et_tools:		"${GOBO}/library/tools"

	et_eiffel_eiffel (et_tools):		"$/eiffel"

	et_eiffel_ast (et_eiffel_eiffel):		"$/ast"

	et_eiffel_assertion (et_eiffel_ast):		"$/assertion"

	et_eiffel_class (et_eiffel_ast):		"$/class"

	et_eiffel_cluster (et_eiffel_ast):		"$/cluster"

	et_eiffel_constant (et_eiffel_ast):		"$/constant"

	et_eiffel_expression (et_eiffel_ast):		"$/expression"

	et_eiffel_feature (et_eiffel_ast):		"$/feature"

	et_eiffel_instruction (et_eiffel_ast):		"$/instruction"

	et_eiffel_misc (et_eiffel_ast):		"$/misc"

	et_eiffel_name (et_eiffel_ast):		"$/name"

	et_eiffel_type (et_eiffel_ast):		"$/type"

	et_eiffel_compilation (et_eiffel_eiffel):		"$/compilation"

	et_eiffel_dynamic (et_eiffel_eiffel):		"$/dynamic"

	et_eiffel_error (et_eiffel_eiffel):		"$/error"

	et_eiffel_generation (et_eiffel_eiffel):		"$/generation"

	et_eiffel_parser (et_eiffel_eiffel):		"$/parser"

	et_eiffel_processor (et_eiffel_eiffel):		"$/processor"

	et_lace_lace (et_tools):		"$/lace"

	et_lace_ast (et_lace_lace):		"$/ast"

	et_lace_error (et_lace_lace):		"$/error"

	et_lace_parser (et_lace_lace):		"$/parser"

	et_xace_xace (et_tools):		"$/xace"

	et_xace_ast (et_xace_xace):		"$/ast"

	et_xace_error (et_xace_xace):		"$/error"

	et_xace_generator (et_xace_xace):		"$/generator"

	et_xace_parser (et_xace_xace):		"$/parser"

	et_xace_support (et_xace_xace):		"$/support"

	et_xace_universe (et_xace_xace):		"$/universe"

	ut_utility:		"${GOBO}/library/utility"

	ut_error (ut_utility):		"$/error"

	ut_formatter (ut_utility):		"$/formatter"

	ut_command (ut_utility):		"$/command"

	ut_support (ut_utility):		"$/support"

	ut_transcoder (ut_utility):		"$/transcoder"

	ut_uri (ut_utility):		"$/uri"

	xm_xml:		"${GOBO}/library/xml"

	xm_position (xm_xml):		"$/position"

	xm_source (xm_xml):		"$/source"

	xm_general (xm_xml):		"$/general"

	xm_event (xm_xml):		"$/event"

	xm_tree (xm_xml):		"$/tree"

	xm_formatter (xm_xml):		"$/formatter"

	xm_resolver (xm_xml):		"$/resolver"

	xm_resolver_interface (xm_resolver):		"$/interface"

	xm_catalog (xm_resolver):		"$/catalog"

	xm_simple (xm_resolver):		"$/simple"

	xm_uri (xm_resolver):		"$/uri"

	xm_parser (xm_xml):		"$/parser"

	xm_interface (xm_parser):		"$/interface"

	xm_eiffel (xm_parser):		"$/eiffel"

	xm_no_expat (xm_parser):		"$/no_expat"

	xm_xml_xpointer (xm_xml):		"${GOBO}/library/xml/xpointer"

	xm_xpointer_common (xm_xml_xpointer):		"$/common"

	xm_xpointer_event (xm_xml_xpointer):		"$/event"

	xm_xml_xslt:		"${GOBO}/library/xml/xslt"

	xm_pattern (xm_xml_xslt):		"$/pattern"

	xm_xslt_function (xm_xml_xslt):		"$/function"

	xm_instruction (xm_xml_xslt):		"$/instruction"

	xm_style (xm_xml_xslt):		"$/style"

	xm_tracing (xm_xml_xslt):		"$/tracing"

	xm_number (xm_xml_xslt):		"$/number"

	xm_xslt_sort (xm_xml_xslt):		"$/sort"

	xm_xslt_event (xm_xml_xslt):		"$/event"

	xm_runtime (xm_xml_xslt):		"$/runtime"

	xm_xslt_core (xm_xml_xslt):		"$/core"

	xm_xml_xpath:		"${GOBO}/library/xml/xpath"

	xm_data_model (xm_xml_xpath):		"$/data_model"

	xm_tinytree (xm_xml_xpath):		"$/tinytree"

	xm_xpath_tree (xm_xml_xpath):		"$/tree"

	xm_value (xm_xml_xpath):		"$/value"

	xm_expression (xm_xml_xpath):		"$/expression"

	xm_xpath_event (xm_xml_xpath):		"$/event"

	xm_function (xm_xml_xpath):		"$/function"

	xm_sort (xm_xml_xpath):		"$/sort"

	xm_stand_alone (xm_xml_xpath):		"$/stand_alone"

	xm_node_test (xm_xml_xpath):		"$/node_test"

	xm_type (xm_xml_xpath):		"$/type"

	xm_xpath_xpointer (xm_xml_xpath):		"$/xpointer"

	xm_core (xm_xml_xpath):		"$/core"

external

	include_path:
		"$(EM)/library/generated_wrapper/c/include",
		"$(EM)/library/generated_wrapper/c/include/spec/ise",
		"$(SDL_HEADER)"

	object:
		"OpenGL32.Lib",
		"GlU32.Lib",
		"$(SDL)\lib\sdlgfx.lib",
		"$(SDL)\lib\SDL_ttf.lib",
		"$(SDL)\lib\SDL.lib",
		"$(SDL)\lib\SDL_image.lib",
		"$(SDL)\lib\SDL_net.lib",
		"$(SDL)\lib\SDL_mixer.lib",
		"$(EM)\library\em_c_eiffel_glue_library_ise_bcb.lib",
		"$(EM)\library\net2.o",
		"$(EM)\library\fastevents.o"

end
