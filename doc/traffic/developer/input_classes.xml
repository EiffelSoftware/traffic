<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://www.gobosoft.com/eiffel/gobo/documentation" id="traffic/developer/tr_input/classes">
<chapterinfo>
	<copyright>
		<year>2005</year>
		<holder>Michela Pedroni</holder>
	</copyright>
    <email>michela.pedroni@inf.ethz.ch</email>
	<date>$Date$</date>
</chapterinfo>
    <title>Traffic input classes</title>
	<section id="top_of_page">
    	<para>
			In the following sections the classes for the map loading will be described. The layout for each class is: 
			Requirements, Description, Class overview. In the Requirements section the name of classes you 
			need to know in order to understand the class described is given. Description is a short 
			description of what the class does. It is more detailed than just the class description 
			that you find in the class header. The class overview provides you with a class diagram. 
		</para>
		<itemizedlist>
			<listitem>
				<link url="#traffic_building_parser">TRAFFIC_BUILDING_PARSER</link>
			</listitem>
			<listitem>
				<link url="#traffic_building_node_processor">TRAFFIC_BUILDING_NODE_PROCESSOR</link>
			</listitem>
			<listitem>
				<link url="#traffic_buildings_node_processor">TRAFFIC_BUILDINGS_NODE_PROCESSOR</link>
			</listitem>
			<listitem>
				<link url="#traffic_roads_node_processor">TRAFFIC_ROADS_NODE_PROCESSOR</link>
			</listitem>
			<listitem>
				<link url="#traffic_road_node_processor">TRAFFIC_ROAD_NODE_PROCESSOR</link>
			</listitem>
			<listitem>
				<link url="#traffic_onroad_node_processor">TRAFFIC_ONROAD_NODE_PROCESSOR</link>
			</listitem>

		</itemizedlist>
    </section>
    <section id="traffic_building_parser">
    	<title>TRAFFIC_BUILDING_PARSER</title>
   		<title>Requirements:</title>
    	<para>
    		<link url="traffic_xml_input_file_parser">TRAFFIC_XML_INPUT_FILE_PARSER</link>,
    		<link url="traffic_node_processor_registry">TRAFFIC_NODE_PROCESSOR_REGISTRY</link>,
    		<link url="traffic_building_node_processor">TRAFFIC_BUILDING_NODE_PROCESSOR</link>,
    		<link url="traffic_buildings_node_processor">TRAFFIC_BUILDINGS_NODE_PROCESSOR</link>
    	</para>
    	<title>Description</title>
    	<para>
			This class is used for parsing an XML file that contains building information and for processing the received data so the buildings specified appear on the map.<newline/>
			The XML file has to follow the following DTD structure:
			<programlisting>
			&lt;!ELEMENT buildings (building*)&gt;

			&lt;!ELEMENT building EMPTY&gt;
			&lt;!ATTLIST building
				name CDATA #REQUIRED
				x1 CDATA #REQUIRED
				y1 CDATA #REQUIRED
				x2 CDATA #REQUIRED
				y2 CDATA #REQUIRED
				height CDATA #REQUIRED
				angle CDATA #REQUIRED
			&gt;
			</programlisting>
			The building position is specifid by the upper left corner (x1,y1) and the bottom right corner (x2,y2) of the building. One has to be aware that the x-axis increases in the left direction and the y-axis increases in the up direction.
    	</para>
    	<para>
			A new building parser is created through the feature <featurename>make_with_map</featurename> which needs a <classname>TRAFFIC_3D_MAP_WIDGET</classname> as input.
    	</para>
    	<para>
			The file can then be added through the inherited feature <featurename>set_file_name</featurename> and parsed through (the also inherited) feature <featurename>parse</featurename>. If the parsing is completed successfully (checked <featurename>has_error</featurename>) processing can be started with <featurename>process</featurename>.<newline/>
			The processing is based on the rules specified in <classname>TRAFFIC_BUILDING_NODE_PROCESSOR</classname> and <classname>TRAFFIC_BUILDINGS_NODE_PROCESSOR</classname>.
    	</para>
    	<title>Class overview</title>
    	<para>
			<image src="image/traffic_building_parser.png"/>
    	</para>
    	<toplink/>
    </section>
    <section id="traffic_building_node_processor">
    	<title>TRAFFIC_BUILDING_PROCESSOR</title>
   		<title>Requirements:</title>
    	<para>
    		<link url="traffic_node_processor">TRAFFIC_NODE_PROCESSOR</link>
    	</para>
    	<title>Description</title>
    	<para>
			In this class is specified how <link url="#traffic_building_parser">TRAFFIC_BUILDING_PARSER</link> has to process a building element. It has specified the element name (<featurename>name</featurename>) and the mandatory attributes (<featurename>mandatory_Attributes)</featurename>. <newline/>
		In the feature <featurename>process</featurename> is specified, what has to be done during processing. In the case of a building element, we only have to check whether the required attributes are supported and have proper type and afterwards create a new building.
    	</para>
    	<title>Class overview</title>
    	<para>
    	<para>
    		<image src="image/traffic_building_node_processor.png"/>
    	</para>
    	</para>
    	<toplink/>
    </section>
    <section id="traffic_buildings_node_processor">
    	<title>TRAFFIC_BUILDINGS_PROCESSOR</title>
   		<title>Requirements:</title>
    	<para>
    		<link url="traffic_node_processor">TRAFFIC_NODE_PROCESSOR</link>
    	</para>
    	<title>Description</title>
    	<para>
			In this class is specified how <link url="#traffic_building_parser">TRAFFIC_BUILDING_PARSER</link> has to process a buildings element. It has specified the element name (<featurename>name</featurename>) and the mandatory attributes (<featurename>mandatory_Attributes)</featurename>. <newline/>
		In the feature <featurename>process</featurename> is specified, what has to be done during processing. In the case of a buildings element, we to process all subnodes.
    	</para>
    	<title>Class overview</title>
    	<para>
    	<para>
    		<image src="image/traffic_buildings_node_processor.png"/>
    	</para>
    	</para>
    	<toplink/>
    </section>
       
     <section id="traffic_roads_node_processor">
    	<title>TRAFFIC_ROADS_NODE_PROCESSOR</title>
   		<title>Requirements:</title>
    	<para>
    		<link url="traffic_node_processor">TRAFFIC_NODE_PROCESSOR</link>
    	</para>
    	<title>Description</title>
    	<para> In this class is specified how to process a &lt;roads&gt; element. The XML for the element road has to follow the following DTD structure:
			
			
			<programlisting>
			&lt;!ELEMENT roads (road*)&gt;

			</programlisting>
			The details for the element &lt;road&gt; are specified belove. In the case of a &lt;roads&gt; element, 
			we only have to process its subnodes using the feature <featurename>process</featurename>
    	</para>
    	<title>Class overview</title>
    	<para>
    	<para>
    		<image src="image/traffic_roads_node_processor.png"/>
    	</para>
    	</para>
    	<toplink/>
    </section>

       <section id="traffic_road_node_processor">
    	<title>TRAFFIC_ROAD_NODE_PROCESSOR</title>
   		<title>Requirements:</title>
    	<para>
    		<link url="traffic_node_processor">TRAFFIC_NODE_PROCESSOR</link>
    	</para>
    	<title>Description</title>
    	<para> In this class is specified how to process a &lt;road&gt; element. The XML for the element road has to follow the following DTD structure:
			
			
			<programlisting>
			&lt;!ELEMENT road EMPTY&gt;
			&lt;!ATTLIST road
				id CDATA #REQUIRED
				from CDATA #REQUIRED
				to CDATA #REQUIRED
				direction CDATA #REQUIRED
				type CDATA #REQUIRED
			&gt;
			</programlisting>

			An element of this type has an id (<featurename>id</featurename>)  and other mandatory attributes (<featurename>mandatory_Attributes</featurename>). 
			In the feature process is specified, what has to be done during processing. In the case of a road element, we have to check whether the required
			attributes are supported and in this case one can creates a new instance of type TRAFFIC_ROAD. 
    	</para>
    	<title>Class overview</title>
    	<para>
    	<para>
    		<image src="image/traffic_road_node_processor.png"/>
    	</para>
    	</para>
    	<toplink/>
    </section>
    
   <section id="traffic_onroad_node_processor">
    	<title>TRAFFIC_ONROAD_NODE_PROCESSOR</title>
   		<title>Requirements:</title>
    	<para>
    		<link url="traffic_node_processor">TRAFFIC_NODE_PROCESSOR</link>
    	</para>
    	<title>Description</title>
    	<para> In this class is specified how to process a &lt;onroad&gt; element. The XML for the element road has to follow the following DTD structure:
			
			
			<programlisting>
			&lt;!ELEMENT onroad EMPTY&gt;
			&lt;!ATTLIST onroad
				id CDATA #REQUIRED
			&gt;
			</programlisting>

			An element of this type has an id (<featurename>id</featurename>)  as only mandatory attribute. 
			The element &lt;onroad&gt; is a subnode of the element &lt;line_section&gt;. When we process one &lt;onroad&gt; node we
			we have first to check whether the required attribute is provided and then we can associate the road with the 
			id we have just parsed with the corresponding line_section. 
    	</para>
    	<title>Class overview</title>
    	<para>
    	<para>
    		<image src="image/traffic_onroad_node_processor.png"/>
    	</para>
    	</para>
    	<toplink/>
    </section>

      
 
</chapter>
