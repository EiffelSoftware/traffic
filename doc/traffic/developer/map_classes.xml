<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://www.gobosoft.com/eiffel/gobo/documentation" id="traffic/developer/map_classes">
	<chapterinfo>
		<copyright>
			<year>2005</year>
			<holder>Michela Pedroni</holder>
		</copyright>
		<email>michela.pedroni@inf.ethz.ch</email>
		<date>$Date$</date>
	</chapterinfo>
	<title>Traffic map classes</title>
	<section id="top_of_page">
		<para>
			In the following sections the classes will be described. The layout for each class is: 
			Requirements, Description, Class overview. In the Requirements the name of classes you 
			need to know in order to understand the class described is given. Description is a short 
			description of what the class does. It is more detailed than just the class description 
			that you find in the class header. The class overview provides you with a class diagram. 
		</para>
		<itemizedlist>
			<listitem>
				<link url="#traffic_building">TRAFFIC_BUILDING</link>
			</listitem>
			<listitem>
				<link url="#traffic_building_information">TRAFFIC_BUILDING_INFORMATION</link>
			</listitem>
			<listitem>
				<link url="#traffic_bus">TRAFFIC_BUS</link>
			</listitem>
			<listitem>
				<link url="#traffic_color">TRAFFIC_COLOR</link>
			</listitem>
			<listitem>
				<link url="#traffic_connection">TRAFFIC_CONNECTION</link>
			</listitem>
			<listitem>
				<link url="#traffic_dispatcher_taxi">TRAFFIC_DISPATCHER_TAXI</link>
			</listitem>
			<listitem>
				<link url="#traffic_dispatcher_taxi_office">TRAFFIC_DISPATCHER_TAXI_OFFICE</link>
			</listitem>
			<listitem>
				<link url="#traffic_event_taxi">TRAFFIC_EVENT_TAXI</link>
			</listitem>
			<listitem>
				<link url="#traffic_event_taxi_office">TRAFFIC_EVENT_TAXI_OFFICE</link>
			</listitem>
			<listitem>
				<link url="#traffic_graph">TRAFFIC_GRAPH</link>
			</listitem>
			<listitem>
				<link url="#traffic_line">TRAFFIC_LINE</link>
			</listitem>
			<listitem>
				<link url="#traffic_line_section">TRAFFIC_LINE_SECTION</link>
			</listitem>
			<listitem>
				<link url="#traffic_line_section_state">TRAFFIC_LINE_SECTION_STATE</link>
			</listitem>
			<listitem>
				<link url="#traffic_line_section_state_constants">TRAFFIC_LINE_SECTION_STATE_CONSTANTS</link>
			</listitem>
			<listitem>
				<link url="#traffic_line_vehicle">TRAFFIC_LINE_VEHICLE</link>
			</listitem>
			<listitem>
				<link url="#traffic_map">TRAFFIC_MAP</link>
			</listitem>
			<listitem>
				<link url="#traffic_map_factory">TRAFFIC_MAP_FACTORY</link>
			</listitem>
			<listitem>
				<link url="#traffic_map_loader">TRAFFIC_MAP_LOADER</link>
			</listitem>
			<listitem>
				<link url="#traffic_moving">TRAFFIC_MOVING</link>
			</listitem>
			<listitem>
				<link url="#traffic_path">TRAFFIC_PATH</link>
			</listitem>
			<listitem>
				<link url="#traffic_path_section">TRAFFIC_PATH_SECTION</link>
			</listitem>
			<listitem>
				<link url="#traffic_passenger">TRAFFIC_PASSENGER</link>
			</listitem>
			<listitem>
				<link url="#traffic_place">TRAFFIC_PLACE</link>
			</listitem>
			<listitem>
				<link url="#traffic_place_information">TRAFFIC_PLACE_INFORMATION</link>
			</listitem>
			<listitem>
				<link url="#traffic_road">TRAFFIC_ROAD</link>
			</listitem>
			<listitem>
				<link url="#traffic_route">TRAFFIC_ROUTE</link>
			</listitem>
			<listitem>
				<link url="#traffic_simple_line">TRAFFIC_SIMPLE_LINE</link>
			</listitem>
			<listitem>
				<link url="#traffic_taxi">TRAFFIC_TAXI</link>
			</listitem>
			<listitem>
				<link url="#traffic_time">TRAFFIC_TIME</link>
			</listitem>
			<listitem>
				<link url="#traffic_tram">TRAFFIC_TRAM</link>
			</listitem>
			<listitem>
				<link url="#traffic_type">TRAFFIC_TYPE</link>
			</listitem>
			<listitem>
				<link url="#traffic_type_line">TRAFFIC_TYPE_LINE</link>
			</listitem>
			<listitem>
				<link url="#traffic_type_road">TRAFFIC_TYPE_ROAD</link>
			</listitem>
			<listitem>
				<link url="#traffic_type_factory">TRAFFIC_TYPE_FACTORY</link>
			</listitem>
			<listitem>
				<link url="#traffic_vehicle">TRAFFIC_VEHICLE</link>
			</listitem>
			<listitem>
				<link url="#traffic_wagon">TRAFFIC_WAGON</link>
			</listitem>
		</itemizedlist>
	</section>
	<section id="traffic_building">
		<title>TRAFFIC_BUILDING</title>
		<title>Requirements:</title>
		<para>
			<link url="#traffic_building_information">TRAFFIC_BUILDING_INFORMATION</link>
		</para>
		<title>Description</title>
		<para>
			The class <classname>TRAFFIC_BUILDING</classname> represents a building. A building is 
			always a rectangle and is specified by its four corners (corner 1 is always the upper left, 
			corner 2 the lower left, corner 3 the lower right and corner 4 the upper right one) and the 
			three dimensions width, breadth and height. Furthermore, an angle (in range -70 to 70 degrees) 
			can be specified by which the building is rotated.
		</para>
		<para>
			A new building is created through the feature <featurename>make</featurename>, which needs 
			the four corners of the building, its height and its name. The creation feature then calculates 
			the width, the breadth and the center and sets the angle to zero. <newline/>
			In case the angle has to be changed after creation, this can be done through 
			<featurename>set_angle</featurename>. <newline/>
			If the building has to be drawn, then it needs also a unique identification number which 
			can be set through <featurename>set_id</featurename>. 
		</para>
		<para>
			The four corners can be accessed through the four features: <featurename>corner1</featurename> 
			(upper left corner), <featurename>corner2</featurename> (lower left corner), 
			<featurename>corner3</featurename> (lower right corner) and <featurename>corner4</featurename> 
			(upper right corner), whereas the three dimensions can be accessed through the tree features: 
			<featurename>width</featurename>, <featurename>breadth</featurename> and 
			<featurename>height</featurename>. Finally, the angle can be accessed through 
			<featurename>angle</featurename>
		</para>
		<para>
		There exists also the possibility to attach 
		<link url="#traffic_building_information">TRAFFIC_BUILDING_INFORMATION</link> through 
		<featurename>set_information</featurename>, which can afterwards be accessed through 
		<featurename>information</featurename>.
		</para>
		<para>
			A quite important feature is <featurename>contains_point</featurename>, which allows 
			to check whether a point is inside a building. It is mainly used to check whether a building 
			has been clicked.
		</para>
		<title>Class overview</title>
		<para>
			<image src="image/traffic_building.png"/>
		</para>
		<toplink/>
	</section>
	<section id="traffic_building_information">
		<title>TRAFFIC_BUILDING_INFORMATION</title>
		<title>Requirements:</title>
		<para>
			None
		</para>
		<title>Description</title>
		<para>
			The class <classname>TRAFFIC_3D_BUILDING_REPRESENTATION</classname> is a collection of 
			additional information for a building. This can be a street, a house number, and a textual 
			description.
		</para>
		<para>	
			A street can be added by <featurename>set_street</featurename>, a house number by 
			<featurename>set_house_number</featurename> and description by 
			<featurename>set_description</featurename>.
		</para>
		<title>Class overview</title>
		<para>
			<image src="image/traffic_building_information.png"/>
		</para>
		<toplink/>
	</section>
	<section id="traffic_bus">
		<title>TRAFFIC_BUS</title>
		<title>Requirements:</title>
		<para>
   			  <link url="#traffic_line_vehicle">TRAFFIC_LINE_VEHICLE</link>
 	   	</para>
		<title>Description</title>
		<para>
			The class <classname>TRAFFIC_BUS</classname> represents bus objects that can serve as 
			replacement vehicles in case of breakdowns of other traffic lines.
		</para>
		<para>
			This class provides a feature <featurename>replace</featurename> that takes as parameter a 
			<classname>TRAFFIC_LINE</classname> to serve as replacement bus for this line.
		</para>
		<title>Class overview</title>
		<para>
			<para>
				<image src="image/traffic_bus.png"/>
			</para>
		</para>
		<toplink/>
	</section>
	<section id="traffic_color">
		<title>TRAFFIC_COLOR</title>
		<title>Requirements:</title>
		<para>
    		None
    	</para>
		<title>Description</title>
		<para>
    		The class <classname>TRAFFIC_COLOR</classname> represents a RGB-Color. A RGB-Color is a color 
    		composed of the
    		three additive components: red, green, blue. The three color parts can be accessed 
    		through the three features: <featurename>red</featurename>, <featurename>green</featurename>, 
    		<featurename>blue</featurename>. An important feature is <featurename>is_valid_color_part
    		</featurename> which makes sure only valid integer values for the rgb-parts are used.
    		The object is created through the <featurename>make</featurename> feature call which sets 
    		the color parts to the passed values. The individual color parts can be changed through 
    		the <featurename>set_color</featurename> commands. Make sure the value you want to 
    		change the color to is valid. For this the <featurename>is_valid_color_part</featurename>
    		query can be used.
    	</para>
		<title>Class overview</title>
		<para>
			<para>
				<image src="image/traffic_color.png"/>
			</para>
		</para>
		<toplink/>
	</section>
	
	<section id="traffic_connection">
		<title>TRAFFIC_CONNECTION</title>
		<title>Requirements:</title>
		<para>
			<link url="#traffic_place">TRAFFIC_PLACE</link>
		</para>
		<title>Description</title>
		<para>
			The deferred class <classname>TRAFFIC_CONNECTION</classname> represents a connection between 
			two places.
			These links can be of type <classname>TRAFFIC_ROAD</classname> or of
			type <classname>TRAFFIC_LINE_SECTION</classname>. The connected places are called origin and destination
			and are accessible with the features <featurename>origin</featurename> and <featurename>destination</featurename>.
			The origin and destination places are the interface which should be used to work with connections. The implementation
			can be either a <classname>TRAFFIC_NODE</classname> or <classname>TRAFFIC_STOP</classname> depending on the type
			of instance. Furthermore, a connection has a list of polypoints, used to display the link on the map and to allow the moving of 
			vehicles on the link.
			</para>
		<para>
			The feature <featurename>length</featurename> returns a calculated length of the connection.
			To calculate the length the polypoints are used, and if no polypoints exists, the position 
			of the origin and destination place are used to calculate a length. This length becomes 
			especially important when starting to calculate routes on lines and even a whole map of lines.
		</para>
		<title>Class overview</title>
		<para>
			<para>
				<image src="image/sg_traffic_connection.png"/>
			</para>
		</para>
		<toplink/>
	</section>
<section id="traffic_dispatcher_taxi">
		<title>TRAFFIC_DISPATCHER_TAXI</title>
		<title>Requirements:</title>
		<para>
   			  <link url="#traffic_taxi">TRAFFIC_TAXI</link>, 
			 <link url="#traffic_dispatcher_taxi_office">TRAFFIC_DISPATCHER_TAXI_OFFICE</link>
 	   	</para>
		<title>Description</title>
		<para>
				The class <classname>TRAFFIC_DISPATCHER_TAXI</classname> represents taxis that 
				use client feature call communication.			
		</para>
		<para>
			This class effects the attribute <featurename>office</featurename> to use a 
			<classname>TRAFFIC_DISPATCHER_TAXI_OFFICE</classname>.
			It effects the deferred feature <featurename>take</featurename> to use method call 
			communication to inform the office about its
			state.
		</para>
		<title>Class overview</title>
		<para>
			<image src="image/traffic_dispatcher_taxi.png"/>
		</para>
		<toplink/>
	</section>
<section id="traffic_dispatcher_taxi_office">
		<title>TRAFFIC_DISPATCHER_TAXI_OFFICE</title>
		<title>Requirements:</title>
		<para>
   			  <link url="#traffic_taxi_office">TRAFFIC_TAXI_OFFICE</link>, 
			 <link url="#traffic_dispatcher_taxi">TRAFFIC_DISPATCHER_TAXI</link>
 	   	</para>
		<title>Description</title>
		<para>
				The class <classname>TRAFFIC_DISPATCHER_TAXI_OFFICE</classname> represents taxi offices 
				that clients and taxis communicate with by feature call.			
		</para>
		<para>
		</para>
		<title>Class overview</title>
		<para>
			<para>
				<image src="image/traffic_dispatcher_taxi_office.png"/>
			</para>
		</para>
		<toplink/>
	</section>
<section id="traffic_event_taxi">
		<title>TRAFFIC_EVENT_TAXI</title>
		<title>Requirements:</title>
		<para>
   			  <link url="#traffic_taxi">TRAFFIC_TAXI</link>, 
			 <link url="#traffic_event_taxi_office">TRAFFIC_EVENT_TAXI_OFFICE</link>
 	   	</para>
		<title>Description</title>
		<para>
				The class <classname>TRAFFIC_EVENT_TAXI</classname> represents taxis that use event based 
				communication.			
		</para>
		<para>
			This class effects the attribute <featurename>office</featurename> to use a 
			<classname>TRAFFIC_EVENT_TAXI_OFFICE</classname>.
			It effects the deferred feature <featurename>take</featurename> to use event based 
			communication to inform the office about its
			state.
		</para>
		<title>Class overview</title>
		<para>
			<para>
				<image src="image/traffic_event_taxi.png"/>
			</para>
		</para>
		<toplink/>
	</section>
<section id="traffic_event_taxi_office">
		<title>TRAFFIC_EVENT_TAXI_OFFICE</title>
		<title>Requirements:</title>
		<para>
   			  <link url="#traffic_taxi_office">TRAFFIC_TAXI_OFFICE</link>
			 <link url="#traffic_event_taxi">TRAFFIC_DISPATCHER_TAXI</link>
 	   	</para>
		<title>Description</title>
		<para>
				The class <classname>TRAFFIC_EVENT_TAXI_OFFICE</classname> represents taxi offices that clients and taxis communicate with using events.			
		</para>
		<para>
				The <classname>TRAFFIC_EVENT_TAXI_OFFICE</classname> defines four events and subscribes itself to these events.
				The  event <featurename>request</featurename>, which customers fire when a taxi is needed. The 
				<featurename>taxi_busy</featurename> event, that taxis fire when they get busy. 
				The <featurename>taxi_available</featurename> event, which taxis fire when they get available again and
				the <featurename>reject_request</featurename> event, that taxis fire when they reject to fulfill a request.
		</para>
		<title>Class overview</title>
		<para>
			<para>
				<image src="image/traffic_event_taxi_office.png"/>
			</para>
		</para>
		<toplink/>
	</section>
	<section id="traffic_graph">
		<title>TRAFFIC_GRAPH</title>
		<title>Requirements:</title>
		<para>
			None
		</para>
		<title>Description</title>
		<para>
				The class <classname>TRAFFIC_GRAPH</classname> holds the transportation lines and the places of a city
				in a graph. It calculates paths through the city. The class is intended to be used as an implementation detail
				of <classname>TRAFFIC_MAP</classname> and should not be used by other classes. To add more path finding
				variations (e.g. preferring trains), change the <featurename>calculate_weight</featurename> and depending
				on whether the function must be applied to all connections, change <featurename>put_edge</featurename> and
				<featurename>enable_user_defined_weight_function</featurename>.
		</para>
		<title>Class overview</title>
		<para>
				<image src="image/traffic_graph.png"/>
		</para>
		<toplink/>
	</section>
	<section id="traffic_line">
		<title>TRAFFIC_LINE</title>
		<title>Requirements:</title>
		<para>
			<link url="#traffic_color">TRAFFIC_COLOR</link>, <link url="#traffic_place">TRAFFIC_PLACE</link>,
    		<link url="#traffic_line_section">TRAFFIC_LINE_SECTION</link>, <link url="#traffic_type">
    		TRAFFIC_TYPE</link>
		</para>
		<title>Description</title>
		<para>
    		The class <classname>TRAFFIC_LINE</classname> models a line of a public transportation system. 
    		Each line has a type, e.g. <classname>TRAFFIC_TYPE_BUS</classname> for a bus line, <classname>
    		TRAFFIC_TYPE_RAIL</classname> for a rail line and so on. This type can be accessed through the 
    		feature <featurename>type</featurename>. In addition a line can have up to two directions. 
    		A line which only has one direction is also valid. Each direction has a terminal place. 
    	</para>
		<para>	
			A new line is created through the feature <featurename>make</featurename>. It takes as input
			the name of your new line and a traffic type. The features <featurename>name</featurename>, 
    		<featurename>color</featurename>, <featurename>type</featurename>, <featurename>terminal_1
    		</featurename>, <featurename>terminal_2</featurename> can directly be called. 
    	</para>
		<para>
    		If you want to get the starting place of a direction of your line use the feature <featurename>
    		start_to_terminal</featurename>. It takes as input either the place in <featurename>terminal_1
    		</featurename> or <featurename>terminal_2</featurename>. If you use just a place, make sure 
    		it is a terminal in a direction of the line. To make sure that a place is a terminal the 
    		<featurename>is_terminal</featurename> query can be used. The features <featurename>
    		one_direction_exists</featurename> and <featurename>other_direction_exists</featurename> return 
    		true if one or other direction (depending on the feature you call) exists. Only if a direction 
    		exists there exists a terminal and a starting place. 
    	</para>
		<para>
    		The query <featurename>is_valid_for_insertion </featurename> tells you if a line section, as it 
    		is, can be inserted into the line. The query <featurename>is_valid_insertion</featurename> tells
    		you if it is possible for a line section of the correct type from a origin place to a destination 
    		place is a possible extension of the line in any direction. So the argument in the second query 
    		(<featurename>is_valid_insertion</featurename>)	is only the origin and destination of a fictionary
    		or real line section. <featurename>Extend</featurename> adds a line section to the line where
    		it fits. So directions can be extended at both their beginning and their end.
    	</para>
		<para>
    		The color of a line can be changed or removed through the features <featurename>set_color
    		</featurename> and <featurename>remove_color</featurename>. 
        </para>
		<title>Class overview</title>
		<para>
			<para>
				<image src="image/traffic_line.png"/>
			</para>
		</para>
		<toplink/>
	</section>
	<section id="traffic_line_section">
		<title>TRAFFIC_LINE_SECTION</title>
		<title>Requirements:</title>
		<para>
			<link url="#traffic_connection">TRAFFIC_CONNECTION</link>, <link url="#traffic_place">TRAFFIC_PLACE</link>
		</para>
		<title>Description</title>
		<para>
			The class <classname>TRAFFIC_LINE_SECTION</classname> represents a connection of a line 
			from one place to another. Those places are called origin and destination. A line section 
			is of some traffic type, e.g. <classname>TRAFFIC_BUS_TYPE</classname>. A line section can 
			be added to a line, forming the lines connection. It can belong to at most one line. 
    	</para>
		<para>
			To create a new line section an origin place, a destination place and a traffic type have 
			to be defined. Such a line section will not belong to any line, its state will be set to
			some normal state and the polypoints are empty.    	
		</para>
		<para>
			A line section has a number of roads (at least one) associated to it. These roads are the physical link
			on which <classname>TRAFFIC_MOVING</classname> objects move along. To set and remove these roads features
			<featurename>set_roads</featurename> and <featurename>remove_roads</featurename> are provided.
		</para>
		<para>
			The changement of the attached line can only be carried out by a line. This is due to the fact, 
			that when a line section has a line attached it should be in this line. Therefore the line 
			is responsible to update line sections that are added to or removed from it.
		</para>
		<title>Class overview</title>
		<para>
			<para>
				<image src="image/traffic_line_section.png"/>
			</para>
		</para>
		<toplink/>
	</section>
		<section id="traffic_line_section_state">
		<title>TRAFFIC_LINE_SECTION_STATE</title>
		<title>Requirements:</title>
		<para>
			<link url="#traffic_line_section_state_constants">TRAFFIC_LINE_SECTION_STATE_CONSTANTS</link>
		</para>
		<title>Description</title>
		<para>
			The class <classname>TRAFFIC_LINE_SECTION_STATE</classname> provides the interface to define 
			states and attach them to line sections. The available states are defined from the 
			<classname>TRAFFIC_LINE_SECTION_STATE_CONSTANTS</classname> class.    	
		</para>
		<para>
			 A new state is simply created by calling its creation feature. The feature <featurename>make
			 </featurename> always creates a normal state. To change it, call the feature <featurename>
			 set_state</featurename> with one of the values defined in <classname>
			 TRAFFIC_LINE_SECTION_STATE_CONSTANTS</classname>.    	
		</para>
		<title>Class overview</title>
		<para>
			<para>
				<image src="image/traffic_line_section_state.png"/>
			</para>
		</para>
		<toplink/>
	</section>
	<section id="traffic_line_section_state_constants">
		<title>TRAFFIC_LINE_SECTION_STATE_CONSTANTS</title>
		<title>Requirements:</title>
		<para>
    		None
	   	</para>
		<title>Description</title>
		<para>
			The class <classname>TRAFFIC_LINE_SECTION_STATE_CONSTANTS</classname> defines all line 
			section states and has the feature <featurename>is_valid_state_value</featurename> that 
			tests any integer value to the states value and the feature <featurename>value_to_string
			</featurename> that returns a string representation of the state value.    	
		</para>
		<title>Class overview</title>
		<para>
			<para>
				<image src="image/traffic_line_section_state_constants.png"/>
			</para>
		</para>
		<toplink/>
	</section>
	<section id="traffic_line_vehicle">
		<title>TRAFFIC_LINE_VEHICLE</title>
		<title>Requirements:</title>
		<para>
   			<link url="#traffic_vehicle">TRAFFIC_VEHICLE</link>
			<link url="#traffic_line">TRAFFIC_LINE</link>
 	   	</para>
		<title>Description</title>
		<para>
			The deferred class <classname>TRAFFIC_LINE_VEHICLE</classname> represents vehicles that pursue a <classname>TRAFFIC_LINE</classname>
			and a <classname>TRAFFIC_LINE_SCHEDULE</classname>. 
		</para>
		<para>
			There are two features added to this class: <featurename>place</featurename> and <featurename>set_to_place</featurename>. The first feature returns 
			the place at the index given by the argument, the result can be found at <featurename>last_place</featurename>. The second sets the vehicle to the position 
			of the given place, if the place is on the line.
			This class effects the feature <featurename>take_tour</featurename>, inherited from <classname>TRAFFIC_MOVING</classname>, to
			set the <featurename>polypoints</featurename> to follow the route given by its line.
		</para>
		<title>Class overview</title>
		<para>
			<para>
					<image src="image/traffic_line_vehicle.png"/>
			</para>
		</para>
		<toplink/>
	</section>
	<section id="traffic_map">
		<title>TRAFFIC_MAP</title>
		<title>Requirements:</title>
		<para>
			<link url="#traffic_graph">TRAFFIC_GRAPH</link>,
			<link url="#traffic_line">TRAFFIC_LINE</link>, <link url="#traffic_place">TRAFFIC_PLACE</link>,
    		<link url="#traffic_line_section">TRAFFIC_LINE_SECTION</link>, <link url="#traffic_building">TRAFFIC_BUILDING</link>, 
			<link url="#traffic_road">TRAFFIC_ROAD</link>

		</para>
		<title>Description</title>
		<para>
			The <classname>TRAFFIC_MAP</classname> is the collection of all lines, line sections, places and buildings.
			All elements are administrated by the map. Through the name of a place or a line you can 
			retrieve it, you can search for line sections and even search shortest paths from one place
			to another. A map has a name and can additionally have a description that gives more 
			information on the purpose of the map.   	
		</para>
		<para>
			The name and the description can be accessed through the features <featurename>name
			</featurename> and <featurename>description</featurename>. Additionally a place of 
			a given name can be accessed through the feature <featurename>place</featurename>.
			For all the elements of the map there exist features to find out whether there is 
			such an element (<featurename>has_place</featurename>, <featurename>has_line</featurename>
			and <featurename>has_line_section</featurename>). To add new elements to the map use the
			features <featurename>add_place</featurename>, <featurename>add_line</featurename>, 
			<featurename>add_line_section</featurename>, <featurename>add_road</featurename> or 
			<featurename>add_building</featurename>. Similar features are provided to remove elements from the map
			(e.g. <featurename>delete_buildings</featurename> and <featurename>remove_road</featurename> to
			remove buildings and roads respectively).
		</para>
		<title>Class overview</title>
		<para>
			<para>
				<image src="image/traffic_map.png"/>
			</para>
		</para>
		<toplink/>
	</section>
	<section id="traffic_map_factory">
		<title>TRAFFIC_MAP_FACTORY</title>
		<title>Requirements:</title>
		<para>
			<link url="#traffic_line">TRAFFIC_LINE</link>, <link url="#traffic_place">TRAFFIC_PLACE</link>,
    		<link url="#traffic_line_section">TRAFFIC_LINE_SECTION</link>, <link url="#traffic_simple_line">
    		TRAFFIC_SIMPLE_LINE</link>, <link url="#traffic_map">TRAFFIC_MAP</link>,
    		<link url="#traffic_type">TRAFFIC_TYPE</link>, <link url="#traffic_type_factory">
    		TRAFFIC_TYPE_FACTORY</link>, <link url="#traffic_building">TRAFFIC_BUILDING</link>, 
			<link url="#traffic_road">TRAFFIC_ROAD</link>

		</para>
		<title>Description</title>
		<para>
			The <classname>TRAFFIC_MAP_FACTORY</classname> is used to create a map and its elements. 
			The general principle is easy. Call the corresponding build feature. Test with the 
			has-features if a valid object was created and access the last created object of a 
			given element type with the corresponding query.		
		</para>
		<para>
			Create a new factory by calling it's <featurename>make</featurename> feature. This 
			creates a new, blank factory. With the <featurename>reset</featurename> feature you
			can reset a factory to create a new map and it's elements from scratch.
		</para>
		<para>
			At first you possibly want to build a map to be able to insert the map elements 
			afterwards. The build feature that builds a named map is called <featurename>build_map</featurename>. The query <featurename>map</featurename> returns the last created 
			map. With the call to the query <featurename>has_map</featurename> you make sure a
			valid map exists. After a successful call to this feature it is safe to call <featurename>
			map</featurename>. To build a place there are two features: to build a standard place whose 
			position is at the origin (0,0) you call <featurename>build_place</featurename>; to build 
			a place with another position call <featurename>build_place_with_position</featurename>. 
			The features <featurename>has_place</featurename> and <featurename>place</featurename> 
			have the same meaning as already mentioned generally. The building and accessing of a line
			section object works as with the other elements. The build features may look a little bit
			complicated with a long list of arguments, but the definition of a line section is quite
			large. A line section has an origin and destination place and a type. Additionally it can 
			have polypoints defining its appearance and a line it belongs to. Therefore all these arguments 
			have to be given to the build features of the line section. The same observation is also valid for roads.
		</para>
		<title>Class overview</title>
		<para>
			<para>
				<image src="image/traffic_map_factory.png"/>
			</para>
		</para>
		<toplink/>
	</section>
	<section id="traffic_map_loader">
		<title>TRAFFIC_MAP_LOADER</title>
		<title>Requirements:</title>
		<para>
			<link url="#traffic_map">TRAFFIC_MAP</link>, <link url="#traffic_shared_error_handler">TRAFFIC_SHARED_HANDLER</link>
		</para>
		<title>Description</title>
		<para>
			The class <classname>TRAFFIC_MAP_LOADER</classname> is used to load maps, specifed by its name.
		</para>
		<para>
			A new instance of <classname>TRAFFIC_MAP_LOADER</classname> is create by calling <featurename>make</featurename>. 
			It takes as input the name of the map to be loaded. The map is then loaded by <featurename>load_map</featurename>, 
			which is either loaded from a dump file or, if this is not available or outdated, parsed from the specified XML file. 
			If the map had to be parsed, a new dump is created, which can be used next time. Afterwards, the map can be accessed through 
			<featurename>map</featurename>.
		</para>
		<para>
			To detect changes in the XML file, a log file containing the XML file names and their timestamps is maintained.
		</para>
		<title>Class overview</title>
		<para>
			<image src="image/traffic_map_loader.png"/>
		</para>
		<toplink/>
	</section>
<section id="traffic_moving">
		<title>TRAFFIC_MOVING</title>
		<title>Requirements:</title>
		<para>
   			None
 	   	</para>
		<title>Description</title>
		<para>
			The deferred class <classname>TRAFFIC_MOVING</classname> represents any type of moving object on the map. 
			The actual type is then given through a <classname>TRAFFIC_TYPE</classname> object.
		</para>
		<para>
			The feature <featurename>polypoints</featurename> defines a list of coordinates where the moving object will go through.
			There are several attributes like <featurename>traffic_type</featurename> which represents the type of the moving, <featurename>traffic_info</featurename>
			could be used for information about the moving, <featurename>speed</featurename> on the map which is changed according to <featurename>virtual_speed</featurename>
			and <featurename>time</featurename>. The feature <featurename>is_reiterating</featurename> defines whether a moving stops when it 
			arrives at its <featurename>origin</featurename> and <featurename>is_traveling_back</featurename> whether it is on its way back.
			There is the feature <featurename>index</featurename> which is a unique ID for each moving.
		</para>
		<para>
			Using the feature <featurename>move</featurename>, the moving will move from its <featurename>origin</featurename> to its 
			<featurename>destination</featurename> with the assigned <featurename>speed</featurename>.
		  	There are two helper features: <featurename>set_coordinates</featurename> and <featurename>set_angle</featurename>, where
			the first one sets the new <featurename>origin</featurename> and <featurename>destination</featurename>, the second one set the
			<featurename>angle_x</featurename> which is used to give the right direction. 
			For movings with random directions the feature <featurename>give_random_direction</featurename> sets the destination
			to a random position on the map.
			This class has a deferred feature <featurename>take_tour</featurename>, which is required for 
			the drawing in the <classname>3D_TRAVELER_REPRESENTATION</classname>. 
		</para>
		<title>Class overview</title>
		<para>
			<para>
					<image src="image/traffic_moving.png"/>
			</para>
		</para>
		<toplink/>
	</section>
<section id="traffic_passenger">
		<title>TRAFFIC_PASSENGER</title>
		<title>Requirements:</title>
		<para>
   			<link url="#traffic_moving">TRAFFIC_MOVING</link>, 
			<link url="#traffic_vehicle">TRAFFIC_VEHICLE</link>
 	   	</para>
		<title>Description</title>
		<para>
			The <classname>TRAFFIC_PASSENGER</classname> class defines objects that use means of transportation
			 to travel.
		</para>
		<para>
			This class  defines features like <featurename>current_vehicle</featurename>, which defines the vehicle the passenger is traveling by.
			The feature <featurename>intended_line</featurename> defines the line the passenger itends to use next , and the features
			<featurename>bording_stop</featurename> and <featurename>debording_stop</featurename> determine where the passengers intends to board and deboard.
			The features <featurename>board</featurename> and <featurename>deboard</featurename> can be used to get into or to get out of a vehicle.
			The feature <featurename>set_intended_line_info</featurename> can be used to set the information  on the <featurename>intendend_line</featurename>, the
			<featurename>bording_stop</featurename> and the <featurename>debording_stop</featurename>.
		</para>
	<title>Class overview</title>
		<para>
			<para>
				<image src="image/traffic_passenger.png"/>
			</para>
		</para>
		<toplink/>
	</section>
	<section id="traffic_node">
		<title>TRAFFIC_NODE</title>
		<title>Requirements:</title>
		<para>
   			<link url="#traffic_place">TRAFFIC_PLACE</link>
				<link url="#traffic_connection">TRAFFIC_CONNECTION</link>
 	  </para>
		<title>Description</title>
		<para>
			A <classname>TRAFFIC_NODE</classname> is part of a place's representation in the <classname>TRAFFIC_GRAPH</classname>.
		</para>
	<title>Class overview</title>
		<para>
			<para>
				<image src="image/traffic_node.png"/>
			</para>
		</para>
		<toplink/>
	</section>
	<section id="traffic_path">
		<title>TRAFFIC_PATH</title>
		<title>Requirements:</title>
		<para>
   			<link url="#traffic_path_section">TRAFFIC_PATH_SECTION</link> 
 	  </para>
		<title>Description</title>
		<para>
			A <classname>TRAFFIC_PATH</classname> is a path from an origin to a destination. It is the result of a shortest
			path calculation or a self-made path and keeps track of the different means of transportation. It can be used to print a textual
			description of the trip. A <classname>TRAFFIC_PATH</classname> exists of different <classname>TRAFFIC_PATH_SECTION</classname>s 
			whereas the first one is set by the feature <featurename>set_first</featurename>, respectively reached by using the feature <featurename>first</featurename>. 
		</para>
	<title>Class overview</title>
		<para>
			<para>
				<image src="image/traffic_path.png"/>
			</para>
		</para>
		<toplink/>
	</section>
	<section id="traffic_path_section">
		<title>TRAFFIC_PATH_SECTION</title>
		<title>Description</title>
		<para>
			A <classname>TRAFFIC_PATH_SECTION</classname> is part of <link url="#traffic_path">TRAFFIC_PATH</link>.
			It has a common means of transport and consists of one or more connections. 
		</para>
		<para>		
			There exist different ways to create a new path section:
			If the line-type is known, with the <featurename>make_tram</featurename>, <featurename>make_bus</featurename>, <featurename>make_rail</featurename>, <featurename>make_walk</featurename> features
			it can be created the appropriate path section. Otherwise it can be used the feature <featurename>make</featurename>.
		</para>
		<para> 
			The total length can be accessed through <featurename>length</featurename>. The feature <featurename>extend</featurename> requires the given
			<classname>TRAFFIC_PATH_SECTION</classname> to have the same <featurename>line</featurename> as
			the path section. This can be checked with <featurename>is_insertable</featurename>. The feature <featurename>get_next</featurename> references to the following <classname>TRAFFIC_PATH_SECTION</classname> and can be set by <featurename>set_next</featurename>.
		</para>
		<toplink/>
	</section>

	
	
	
	<section id="traffic_place">
		<title>TRAFFIC_PLACE</title>
		<title>Requirements:</title>
		<para>
			<link url="#traffic_place_information">TRAFFIC_PLACE_INFORMATION</link>
		</para>
		<title>Description</title>
		<para>
			The class <classname>TRAFFIC_PLACE</classname> represents a place in a city. It can 
			have additional information like one ore more pictures and a description attached to
			it. Additionally it can have a position.		
		</para>
		<para>
			There exist two different ways to create a new place. The first way is to only define
			a name of the place, the position will be set to default (feature <featurename>
			make</featurename>). The second one is to also give its position to the creation feature
			(feature <featurename>make</featurename>).
		</para>
		<para>
			The name, position and information can be accessed through the according features. 
			The information can be Void, whereas the name and position should never be void. 
			The information and position can also be changed during the lifetime of a place object.
		</para>
		<title>Class overview</title>
		<para>
			<para>
				<image src="image/traffic_place.png"/>
			</para>
		</para>
		<toplink/>
	</section>
	<section id="traffic_place_information">
		<title>TRAFFIC_PLACE_INFORMATION</title>
		<title>Requirements:</title>
		<para>
   			LINKED_LIST
 	   	</para>
		<title>Description</title>
		<para>
			The class <classname>TRAFFIC_PLACE_INFORMATION</classname> is a collection of additional 
			information for a place. This can be one or more pictures (path to the pictures) and a 
			textual description.
		</para>
		<para>
			A picture is added with the feature <featurename>extend_picture</featurename> and a 
			description is added with the command <featurename>set_description</featurename>.
			To delete a picture you have to know its path and use the command <featurename>
			remove_picture</featurename>. To remove a description just call <featurename>
			remove_description</featurename>.		
		</para>
		<title>Class overview</title>
		<para>
			<para>
				<image src="image/traffic_place_information.png"/>
			</para>
		</para>
		<toplink/>
	</section>
		<section id="traffic_road">
		<title>TRAFFIC_ROAD</title>
		<title>Requirements:</title>
		<para>
			<link url="#traffic_connection">TRAFFIC_CONNECTION</link><link url="#traffic_place">TRAFFIC_PLACE</link>
		</para>
		<title>Description</title>
		<para>
			The class <classname>TRAFFIC_ROAD</classname> represents a connection between two places.
			In general only a road can connect the same two places, whereas there can be more than
			one line sections between this two places. The road has an associated type, e.g. <classname>
			TRAFFIC_TRAM</classname>. Roads are displayed on the map and used for the moving of vehicles. 
    	</para>
    	<para>
    		Each road has an associated id. Two roads with the same id cannot exists. The id is used to associate
    		a particular road to one ore more line sections. To create a new road an origin place, a destination place,
    		a traffic type and a direction have to be defined. 
    	</para>
		<title>Class overview</title>
		<para>
			<para>
				<image src="image/traffic_road.png"/>
			</para>
		</para>
		<toplink/>
	</section>

	<section id="traffic_route">
		<title>TRAFFIC_ROUTE</title>
		<title>Requirements:</title>
		<para>
			<link url="#traffic_place">TRAFFIC_PLACE</link>, <link url="#traffic_line_section">
   			TRAFFIC_LINE_SECTION</link>
		</para>
		<title>Description</title>
		<para>
			The class <classname>TRAFFIC_ROUTE</classname> calculates the shortest path for a set 
			of places you want to visit on a given map. You can change the route by adding or removing 
			places you want to visit with the features <featurename>extend</featurename> and
			<featurename>remove</featurename>.		
		</para>
		<para>
			After calculating a route through the feature <featurename>calculate_shortest_path
			</featurename> the places and used line sections that are on the route can be accessed 
			through <featurename>places_on_route</featurename> and <featurename>line_sections</featurename>.
		</para>
		<title>Class overview</title>
		<para>
			<para>
				<image src="image/traffic_route.png"/>
			</para>
		</para>
		<toplink/>
	</section>
	<section id="traffic_simple_line">
		<title>TRAFFIC_SIMPLE_LINE</title>
		<title>Requirements:</title>
		<para>
			<link url="#traffic_line">TRAFFIC_LINE</link>
		</para>
		<title>Description</title>
		<para>
			<classname>TRAFFIC_SIMPLE_LINE</classname> is a line that always has a line section in 
			both directions. So if you add a line section from place A to place B the line section 
			from place B to place A will be added as well. As a result you get a symmetric line.		
		</para>
		<para>
			The only feature that differs from the features of class <link url="#traffic_line">
				<classname>TRAFFIC_LINE</classname>
			</link> is the creation feature
			that has an additional argument: the traffic map that the simple line (and consequently its 
			line sections) is in.
		</para>
		<title>Class overview</title>
		<para>
			<para>
				<image src="image/traffic_simple_line.png"/>
			</para>
		</para>
		<toplink/>
	</section>
	<section id="traffic_stop">
		<title>TRAFFIC_STOP</title>
		<title>Requirements:</title>
		<para>
   			  <link url="#traffic_node">TRAFFIC_NODE</link>
 	   	</para>
		<title>Description</title>
		<para>
			The class <classname>TRAFFIC_STOP</classname> represents a special node in the <classname>TRAFFIC_GRAPH</classname>.
			is the equivalent of a public transportation stop; it is the location where a transport vehicle halts at a given place,
			to allow passengers to board or deboard.
		</para>
		<para>
			The feature <featurename>line</featurename> is the <classname>TRAFFIC_LINE</classname> the stop belongs to.
		</para>
		<title>Class overview</title>
		<para>
			<para>
				<image src="image/traffic_stop.png"/>
			</para>
		</para>
		<toplink/>
	</section>
	<section id="traffic_taxi">
		<title>TRAFFIC_TAXI</title>
		<title>Requirements:</title>
		<para>
   			  <link url="#traffic_vehicle">TRAFFIC_VEHICLE</link>
 	   	</para>
		<title>Description</title>
		<para>
			The deferred class <classname>TRAFFIC_TAXI</classname> represents taxis working for a taxi office.
		</para>
		<para>
			This class has a deferred attribute <featurename>office</featurename> and an attribute <featurename>busy</featurename>.  It defines 
			a deferred feature <featurename>take</featurename> that takes two parameters from_location and to_location and picks somebody up 
			at from_location and brings him to to_location.
		</para>
		<title>Class overview</title>
		<para>
			<para>
				<image src="image/traffic_taxi.png"/>
			</para>
		</para>
		<toplink/>
	</section>
	<section id="traffic_taxi_office">
		<title>TRAFFIC_TAXI_OFFICE</title>
		<title>Requirements:</title>
		<para>
   			none
 	   	</para>
		<title>Description</title>
		<para>
				Deferred class for taxi offices.
		</para>
		<para>
				This class has an attribute <featurename>available_taxi_list</featurename>, which is a list of available
				taxis that work for the taxi office.
				Other features are the <featurename>call</featurename> feature: this feature takes two parameters from_location and 
				to_location, it determines the nearest taxi to to_location and passes the request on to this taxi.
				Furthermore this class has features <featurename>enlist</featurename> to add a taxi to the <featurename>available_taxi_list</featurename> and <featurename>delist</featurename> to remove 
				a taxi from the <featurename>available_taxi_list</featurename>.
		</para>
		<title>Class overview</title>
		<para>
			<para>
				<image src="image/traffic_taxi_office.png"/>
			</para>
		</para>
		<toplink/>
	</section>
	<section id="traffic_time">
		<para/>
		<title>TRAFFIC_TIME</title>
		<title>Requirements:</title>
		<para>
			None
		</para>
		<title>Description</title>
		<para>
		The class <classname cluster="tr_traffic.tr_utils.tr_tr_time">TRAFFIC_TIME</classname> is the representation of time in the model. 
		The time supports starting time, pausing time, resuming time and reseting time. The feature <featurename class="tr_traffic.tr_util.tr_tr_time.traffic_time">time_count</featurename> counts the time according to the simulated
		minutes. The functionality of the class EM_TIME_SINGLETON is extended by the feature <featurename class="tr_traffic.tr_util.tr_tr_time.traffic_time">add_callback_procedure</featurename> which makes it possible not only to call functions
		every 'delay' time but also procedures. The feature <featurename class="tr_traffic.tr_util.tr_tr_time.traffic_time">add_callback_tour</featurename> provides the possibility to handle the tours separately because it could be the case
		that one doesn't want to call the tours in the same frequence as the other procedures. Some generic extension could be thought of so that every procedure can have its one frequency.
		</para>
		<toplink/>
	</section>
<section id="traffic_tram">
		<title>TRAFFIC_TRAM</title>
		<title>Requirements:</title>
		<para>
   			  <link url="#traffic_line_vehicle">TRAFFIC_LINE_VEHICLE</link>
 			 <link url="#traffic_wagon">TRAFFIC_WAGON</link>
 	   	</para>
		<title>Description</title>
		<para>
			The class <classname>TRAFFIC_TRAM</classname> represents tram objects that can increase their capacity by adding
			wagons, <classname>TRAFFIC_WAGON</classname>s.
		</para>
		<para>
			The <classname>TRAFFIC_TRAM</classname> provides features <featurename>add_wagon</featurename> and 
			<featurename>remove_wagon</featurename>.		
			The feature <featurename>wagons</featurename> defines the list of wagons attached. The attribute <featurename>wagon_limitation</featurename>
			determines the maximum number of  wagons that can be attached.
		</para>
		<title>Class overview</title>
		<para>
			<para>
			<image src="image/traffic_tram.png"/>
			</para>
		</para>
		<toplink/>
	</section>
	<section id="traffic_type">
		<title>TRAFFIC_TYPE</title>
		<title>Requirements:</title>
		<para>
   			None
 	   	</para>
		<title>Description</title>
		<para>
			The class <classname>TRAFFIC_TYPE</classname> is used to identify the type of a road, a line 
			or a line_section. <classname>TRAFFIC_TYPE</classname> is the abstract class of all 
			possible traffic types while <classname>TRAFFIC_TYPE_LINE</classname> and <classname>TRAFFIC_ROAD_TYPE
			</classname> represents the type of lineS and roads rispectively.
		</para>
		<para>
			The <classname>TRAFFIC_TYPE</classname> class has two interesting query: <featurename>name</featurename> 
			returns a textual representation of the traffic type. 
		</para>
		<title>Class overview</title>
		<para>
			<para>
				<image src="image/traffic_type.png"/>
			</para>
		</para>
		<toplink/>
	</section>
		<section id="traffic_type_factory">
		<title>TRAFFIC_TYPE_FACTORY</title>
		<title>Requirements:</title>
		<para>
   			None
 	   	</para>
		<title>Description</title>
		<para>
			The class <classname>TRAFFIC_TYPE_FACTORY</classname> creates singleton traffic types. 
			This means you get the same type object every time you build a type. This makes it 
			easier to compare two objects of a given traffic type: you can simply compare the 
			references of the type. If they are identical the type of the two objects those type 
			references belong to are the same.
		</para>
		<para>
			The feature <featurename>valid_name</featurename> tests, if the name given as argument
			is a valid name of a traffic type. For valid names, traffic types can be built. The 
			query <featurename>has_type</featurename> tells you whether the last call to build 
			was successful.
		</para>
		<para>
			The factory can be reset by the <featurename>reset</featurename> feature call. The 
			most important feature of the factory is <featurename>build</featurename>. It 
			generates a traffic type of the specified type. If you are not sure about the string, 
			call <featurename>valid_name</featurename> to assure, that the type you want to build 
			is a valid one. The last created type of the factory can be accessed with the call to
			<featurename>traffic_type</featurename>. The query <featurename>has_type</featurename> 
			returns true if the type could be built.
		</para>
		<title>Class overview</title>
		<para>
			<para>
				<image src="image/traffic_type_factory.png"/>
			</para>
		</para>
		<toplink/>
	</section>

		<section id="traffic_type_line">
		<title>TRAFFIC_TYPE_LINE</title>
		<title>Requirements:</title>
		<para>
   			<link url="#traffic_type">TRAFFIC_TYPE</link>
 	   	</para>
		<title>Description</title>
		<para>
			The class <classname>TRAFFIC_TYPE_LINE</classname> is used to identify the type of lines and line sections.
			Traffic line types are mainly used to make sure that only line sections of a given type can be added to a line of some type.		</para>
		<para>
			The <classname>TRAFFIC_TYPE_LINE</classname> class introduces an interesting query: <featurename>is_allowed_type
			</featurename> that check if one object of type <classname>TRAFFIC_LINE_VEHICLE</classname> is allowed to move on the given line.
		</para>
		<title>Class overview</title>
		<para>
			<para>
				<image src="image/traffic_type_line.png"/>
			</para>
		</para>
		<toplink/>
	</section>
	<section id="traffic_type_road">
		<title>TRAFFIC_TYPE_ROAD</title>
		<title>Requirements:</title>
		<para>
   			<link url="#traffic_type">TRAFFIC_TYPE</link>
 	   	</para>
		<title>Description</title>
		<para>
			The deferred class <classname>TRAFFIC_TYPE_ROAD</classname> inherits from <classname>TRAFFIC_TYPE</classname> 
			and is used to identify the type of a road. The type of the road is used to ensure that vehicles can drives 
			only on right medium (and for example no bus drives on a railway and so on).
		</para>
		<para>
			The <classname>TRAFFIC_TYPE_ROAD</classname> class introduces an interesting query: <featurename>is_allowed_type
			</featurename> that check if one object of type <classname>TRAFFIC_MOVING</classname> is allowed to travel on the given road.
		</para>
		<title>Class overview</title>
		<para>
			<para>
				<image src="image/traffic_type_road.png"/>
			</para>
		</para>
		<toplink/>
	</section>
<section id="traffic_vehicle">
		<title>TRAFFIC_VEHICLE</title>
		<title>Requirements:</title>
		<para>
   			<link url="#traffic_moving">TRAFFIC_MOVING</link>
 	   	</para>
		<title>Description</title>
		<para>
			The <classname>TRAFFIC_VEHICLE</classname> is a deferred class for objects that can be used to transport cargo or passengers.
		</para>
		<para>
			This class defines a function <featurename>capacity</featurename>, to query the maximum load the vehicle is able to carry, an 
			attribute <featurename>current_load</featurename> and features <featurename>load</featurename> and <featurename>unload</featurename>.
		</para>
	<title>Class overview</title>
		<para>
			<para>
					<image src="image/traffic_vehicle.png"/>
			</para>
		</para>
		<toplink/>
	</section>
<section id="traffic_wagon">
		<title>TRAFFIC_WAGON</title>
		<title>Requirements:</title>
		<para>
   			  none
 	   	</para>
		<title>Description</title>
		<para>
			The class <classname>TRAFFIC_WAGON</classname> represents an object that can be
			attached to a vehicle to increase its capacity.
		</para>
		<para>
			This class provides a feature <featurename>capacity</featurename> .
		</para>
		<title>Class overview</title>
		<para>
			<para>
				<image src="image/traffic_wagon.png"/>
			</para>
		</para>
		<toplink/>
	</section>
</chapter>