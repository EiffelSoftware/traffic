<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://www.gobosoft.com/eiffel/gobo/documentation" id="traffic/developer/tr_visualization/classes">
<chapterinfo>
	<copyright>
		<year>2005</year>
		<holder>Michela Pedroni</holder>
	</copyright>
    <email>michela.pedroni@inf.ethz.ch</email>
	<date>$Date$</date>
</chapterinfo>
    <title>Traffic visualization classes</title>
	<section id="top_of_page">
    	<para>
			In the following sections the classes will be described. The layout for each class is: 
			Requirements, Description, Class overview. In the Requirements section the name of classes you 
			need to know in order to understand the class described is given. Description is a short 
			description of what the class does. It is more detailed than just the class description 
			that you find in the class header. The class overview provides you with a class diagram. 
		</para>
		<itemizedlist>
			<listitem>
				<link url="#traffic_3d_constants">TRAFFIC_3D_CONSTANTS</link>
			</listitem>
			<listitem>
				<link url="#traffic_3d_map_widget">TRAFFIC_3D_MAP_WIDGET</link>
			</listitem>
			<listitem>
				<link url="#traffic_building_factory">TRAFFIC_BUILDING_FACTORY</link>
			</listitem>
			<listitem>
				<link url="#traffic_3d_building_representation">TRAFFIC_3D_BUILDING_REPRESENTATION</link>
			</listitem>
			<listitem>
				<link url="#traffic_3d_line_factory">TRAFFIC_3D_LINE_FACTORY</link>
			</listitem>
			<listitem>
				<link url="#traffic_3d_line_representation">TRAFFIC_3D_LINE_REPRESENTATION</link>
			</listitem>
			<listitem>
				<link url="#traffic_3d_object_loader">TRAFFIC_3D_OBJECT_LOADER</link>
			</listitem>
			<listitem>
				<link url="#traffic_3d_place_factory">TRAFFIC_3D_PLACE_FACTORY</link>
			</listitem>
			<listitem>
				<link url="#traffic_place_representation">TRAFFIC_PLACE_REPRESENTATION</link>
			</listitem>
			<listitem>
				<link url="#traffic_traveler_representation">TRAFFIC_TRAVELER_REPRESENTATION</link>
			</listitem>
		</itemizedlist>
    </section>
    <section id="traffic_3d_constants">
    	<title>TRAFFIC_3D_CONSTANTS</title>
   		<title>Requirements:</title>
    	<para>
    		None
    	</para>
    	<title>Description</title>
    	<para>
			This class is shared by all other classes in this section. It has some default values like <featurename>window_width</featurename>
			or <featurename>place_height</featurename>. Another feature <featurename>map_to_gl_coords</featurename> can be found in this class.
			This feature translates given coordinates to coordinates according to the map.
    	</para>
    	<title>Class overview</title>
    	<para>
    	<para>
    		<image src="image/traffic_3d_constants.png"/>
    	</para>
    	</para>
    	<toplink/>
    </section>
<section id="traffic_3d_map_widget">
    	<title>TRAFFIC_3D_MAP_WIDGET</title>
   		<title>Requirements:</title>
    	<para>
			<classname>EM_3D_COMPONENT</classname>
			<classname>TRAFFIC_3D_CONSTANTS</classname>
    	</para>
    	<title>Description</title>
    	<para>
			The <classname>TRAFFIC_3D_MAP_WIDGET</classname> class is the main class in this cluster. As seen in the overview it contains all the representations of buildings, 
			lines, places and travelers. It represents the whole map which can be plugged into an <classname>EM_3D_SCENE</classname>. It provides the feature <featurename>draw</featurename> that draws all the city elements onto the screen. 
			The feature <featurename>collision_polygons</featurename> returns a list of polygons that allow to which is useful to search for a collision (e.g. used for placing buildings). 
			The feature <featurename>load_map</featurename> is used to load from a file and create all the lines and places. There is a map dump which is loaded instead 
			if there is such a map dump and this dump file is up to date.
    	</para>
		<para>
			There are three features to add buildings (<featurename>add_building</featurename>, <featurename>add_buildings_randomly</featurename>, <featurename>add_buildings_along_lines</featurename>) which either add one building, several randomly distributed buildings or several buildings along all traffic lines (expect railways). It is also possible to delete all the buildings with the feature <featurename>delete_buildings</featurename>. <newline/>
			You can add a traveler through <featurename>add_traveler</featurename>. For all attributes there are corresponding setter methods.
		</para>
		<para>
			It is also possible to get informed if a building is clicked. If a class needs this functionality, it has to subscribe to <featurename>building_clicked_event</featurename>.
		</para>
    	<title>Class overview</title>
    	<para>
    	<para>
    		<image src="image/traffic_3d_map_widget.png"/>
    	</para>
    	</para>
    	<toplink/>
    </section>
    <section id="traffic_building_factory">
    	<title>TRAFFIC_BUILDING_FACTORY</title>
   		<title>Requirements:</title>
    	<para>
    		None
    	</para>
    	<title>Description</title>
    	<para>
			The class <classname>TRAFFIC_BUILDING_FACTORY</classname> is a factory for the 3D objects which represent the buildings on the map. The interface is for each of the factories the same: With the features <featurename>add_gauger</featurename> and <featurename>remove_gauger</featurename> one can handle procedures for decisions. These procedures can then be called through the feature <featurename>take_decision</featurename> which calls the right gauger and saves the decision in the string <featurename>decision</featurename>. For creating a  representation of the built object one can add specific procedures through the features <featurename>add_building_type</featurename> and remove them by calling <featurename>remove_building_type</featurename>. The last two features are <featurename>specify_object</featurename> which takes the right building type according to the decision and <featurename>create_object</featurename> which is inherited from <classname>EM_3D_OBJECT_FACTORY</classname> and returns the created object.
    	</para>
    	<title>Class overview</title>
    	<para>
    	<para>
    		<image src="image/traffic_building_factory.png"/>
    	</para>
    	</para>
    	<toplink/>
    </section>
<section id="traffic_3d_building_representation">
    	<title>TRAFFIC_3D_BUILDING_REPRESENTATION</title>
   		<title>Requirements:</title>
    	<para>
    		<link url="../classes.html#traffic_building">TRAFFIC_BUILDING</link>
			<classname>TRAFFIC_3D_CONSTANTS</classname>
    	</para>
    	<title>Description</title>
    	<para>
			 The class <classname>TRAFFIC_3D_BUILDING_REPRESENTATION</classname> is a container for all traffic building 3D objects. As expected there is a feature <featurename>draw</featurename> to draw all objects in the container. <newline/>
Buildings can be highlighted or un-highlighted by calling the features <featurename>highlight_building</featurename> or <featurename>un_highlight_building</featurename>. With the feature <featurename>add_building</featurename> a building can be added to the representation and <featurename>delete_buildings</featurename> deletes all the buildings from the representation.
    	</para>
    	<title>Class overview</title>
    	<para>
    	<para>
    		<image src="image/traffic_3d_building_representation.png"/>
    	</para>
    	</para>
    	<toplink/>
    </section>
<section id="traffic_3d_line_factory">
    	<title>TRAFFIC_3D_LINE_FACTORY</title>
   		<title>Requirements:</title>
    	<para>
    		<classname>EM_3D_OBJECT_FACTORY</classname>
    	</para>
    	<title>Description</title>
    	<para>
			The class <classname>TRAFFIC_3D_LINE_FACTORY</classname> is a factory for the 3D objects which represent the lines on the map. The interface is for each of the factories the same:
			With the features <featurename>add_gauger</featurename> and <featurename>remove_gauger</featurename> one can handle procedures for decisions. These procedures can then 
			be called through the feature <featurename>take_decision</featurename> which calls the right gauger and saves the decision in the string <featurename>decision</featurename>.
			For creating a representation of the built object one can add specific procedures through the features <featurename>add_line_type</featurename> and remove them by calling
			<featurename>remove_line_type</featurename>. The last two features are the feature <featurename>specify_object</featurename> which takes the right line type according to the decision
			and the feature <featurename>create_object</featurename> which is inherited from <classname>EM_3D_OBJECT_FACTORY</classname> and returns the created object.
    	</para>
    	<title>Class overview</title>
    	<para>
    	<para>
    		<image src="image/traffic_3d_line_factory.png"/>
    	</para>
    	</para>
    	<toplink/>
    </section>
<section id="traffic_3d_line_representation">
    	<title>TRAFFIC_3D_LINE_REPRESENTATION</title>
   		<title>Requirements:</title>
    	<para>
    		<classname>EM_3D_OBJECT</classname>
			<classname>TRAFFIC_3D_CONSTANTS</classname>
    	</para>
    	<title>Description</title>
    	<para>
			The class <classname>TRAFFIC_3D_LINE_REPRESENTATION</classname> is a container for all traffic line 3D objects. As expected there is a feature <featurename>draw</featurename> to draw all objects
			in the container. If a shortest line is added by <featurename>add_shortest_line</featurename> and not removed through <featurename>remove_shortest_line</featurename> the feature
			<featurename>draw_shortest_line</featurename> draws it. Lines can be highlighted or un-highlighted by calling the features
			<featurename>highlight_single_line</featurename>, <featurename>un_highlight_single_line</featurename> and similar ones. With the feature <featurename>add_lines</featurename> all lines
			of a map can be added, but single lines can be added too.
    	</para>
    	<title>Class overview</title>
    	<para>
    	<para>
    		<image src="image/traffic_3d_line_representation.png"/>
    	</para>
    	</para>
    	<toplink/>
    </section>
<section id="traffic_3d_object_loader">
    	<title>TRAFFIC_3D_OBJECT_LOADER</title>
   		<title>Requirements:</title>
    	<para>
    		<classname>EM_OBJ_LOADER</classname>
    	</para>
    	<title>Description</title>
    	<para>
			In principle this class is a factory as well. It is used to create ".obj" files. The feature <featurename>set_em_color</featurename> sets the color of a created object.
			The feature <featurename>load_file</featurename> is used to load a new file, other than the original feature this feature closes it is opened files after use.
			The feature <featurename>specify_object</featurename> specifies the object according to the loaded file and the given color.
		</para>
    	<title>Class overview</title>
    	<para>
    	<para>
    		<image src="image/traffic_3d_object_loader.png"/>
    	</para>
    	</para>
    	<toplink/>
    </section>
<section id="traffic_3d_place_factory">
    	<title>TRAFFIC_3D_PLACE_FACTORY</title>
   		<title>Requirements:</title>
    	<para>
    		<classname>EM_3D_OBJECT_FACTORY</classname>
    	</para>
    	<title>Description</title>
    	<para>
			The class <classname>TRAFFIC_3D_PLACE_FACTORY</classname> is a factory for the 3D objects which represent the places on the map. The interface is for each of the factories the same:
			With the features <featurename>add_gauger</featurename> and <featurename>remove_gauger</featurename> one can handle procedures for decisions. These procedures can then 
			be called through the feature <featurename>take_decision</featurename> which calls the right gauger and saves the decision in the string <featurename>decision</featurename>.
			For creating a representation of the built object one can add specific procedures through the features <featurename>add_place_type</featurename> and remove them by calling
			<featurename>remove_place_type</featurename>. The last two features are the feature <featurename>specify_object</featurename> which takes the right place type according to the decision
			and the feature <featurename>create_object</featurename> which is inherited from <classname>EM_3D_OBJECT_FACTORY</classname> and returns the created object.
    	</para>
    	<title>Class overview</title>
    	<para>
    	<para>
    		<image src="image/traffic_3d_place_factory.png"/>
    	</para>
    	</para>
    	<toplink/>
    </section>
<section id="traffic_place_representation">
    	<title>TRAFFIC_PLACE_REPRESENTATION</title>
   		<title>Requirements:</title>
    	<para>
    		<classname>TRAFFIC_3D_CONSTANTS</classname>
    	</para>
    	<title>Description</title>
    	<para>
			The class supports the feature <featurename>draw</featurename> to draw all places. The feature <featurename>highlight_place</featurename> highlights a place.
			Through the feature <featurename>add_places</featurename> all places of a map are added to the container.
    	</para>
    	<title>Class overview</title>
    	<para>
    	<para>
    		<image src="image/traffic_place_representation.png"/>
    	</para>
    	</para>
    	<toplink/>
    </section>
<section id="traffic_traveler_representation">
    	<title>TRAFFIC_TRAVELER_REPRESENTATION</title>
   		<title>Requirements:</title>
    	<para>
    		<classname>TRAFFIC_3D_CONSTANTS</classname>
    	</para>
    	<title>Description</title>
    	<para>
			Like all other containers the feature <featurename>draw</featurename> is also provided to draw all travelers. To add a traveler call <featurename>add_traveler</featurename>. 
			As there are no travelers provided in the map you have to provide the <classname>TRAFFIC_MAP</classname> to add this traveler. The feature <featurename>remove_traveler</featurename> removes a walking traveler
			from the map, the feature <featurename>remove_specific_traveler</featurename> does the same by comparing the given traveler with all others in the container. If found it is removed.
			There is a feature <featurename>add_trams_per_line</featurename> which adds the given number or maximal trams to each line.
    	</para>
    	<title>Class overview</title>
    	<para>
    	<para>
    		<image src="image/traffic_traveler_representation.png"/>
    	</para>
    	</para>
    	<toplink/>
    </section>

</chapter>
